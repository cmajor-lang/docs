/* ------------------------------------------------------------
author: "ER"
name: "Tuned Bar", "Six Rack Tuned Bars"
Code generated with Faust 2.72.10 (https://faust.grame.fr)
Compilation options: -a /usr/local/share/faust/cmajor/minimal.cmajor -lang cmajor -ct 1 -cn STunedBar6 -es 1 -mcd 16 -mdd 1024 -mdy 33 -single -ftz 0
------------------------------------------------------------ */
/************************************************************************ 
 IMPORTANT NOTE : this file contains two clearly delimited sections :
 the ARCHITECTURE section (in two parts) and the USER section. Each section
 is governed by its own copyright and license. Please check individually
 each section for license and copyright information.
 *************************************************************************/

/******************* BEGIN minimal.cmajor ****************/

/************************************************************************
 FAUST Architecture File
 Copyright (C) 2003-2019 GRAME, Centre National de Creation Musicale
 ---------------------------------------------------------------------
 This Architecture section is free software; you can redistribute it
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3 of
 the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; If not, see <http://www.gnu.org/licenses/>.
 
 EXCEPTION : As a special exception, you may create a larger work
 that contains this FAUST architecture section and distribute
 that work under terms of your choice, so long as this FAUST
 architecture section is not modified.
 
 ************************************************************************
 ************************************************************************/
 
//----------------------------------------------------------------------------
//  FAUST generated signal processor
//----------------------------------------------------------------------------
namespace faust 
{
	processor STunedBar6
	{
		input event float32 eventfVslider5 [[ name: "Instrument Hand0", group: "/v:tunedBars/h:0x00/h:Bar_0/Instrument_Hand0", min: 0.0f, max: 5.0f, init: 3.0f, step: 1.0f, meta_acc0: "1 0 -10 0 18", meta_knob0: "1" ]];
		input event float32 eventfVslider4 [[ name: "Instrument Hand1", group: "/v:tunedBars/h:0x00/h:Bar_1/Instrument_Hand1", min: 0.0f, max: 5.0f, init: 3.0f, step: 1.0f, meta_acc1: "1 0 -10 0 18", meta_knob1: "2" ]];
		input event float32 eventfVslider3 [[ name: "Instrument Hand2", group: "/v:tunedBars/h:0x00/h:Bar_2/Instrument_Hand2", min: 0.0f, max: 5.0f, init: 2.0f, step: 1.0f, meta_acc2: "1 0 -10 0 14", meta_knob2: "3" ]];
		input event float32 eventfVslider2 [[ name: "Instrument Hand3", group: "/v:tunedBars/h:0x00/h:Bar_3/Instrument_Hand3", min: 0.0f, max: 5.0f, init: 2.0f, step: 1.0f, meta_acc3: "1 0 -10 0 14", meta_knob3: "4" ]];
		input event float32 eventfVslider1 [[ name: "Instrument Hand4", group: "/v:tunedBars/h:0x00/h:Bar_4/Instrument_Hand4", min: 0.0f, max: 5.0f, init: 4.0f, step: 1.0f, meta_acc4: "1 0 -10 0 10", meta_knob4: "5" ]];
		input event float32 eventfVslider0 [[ name: "Instrument Hand5", group: "/v:tunedBars/h:0x00/h:Bar_5/Instrument_Hand5", min: 0.0f, max: 5.0f, init: 4.0f, step: 1.0f, meta_acc5: "1 0 -10 0 10", meta_knob5: "6" ]];
		output stream float32 output0;
		output stream float32 output1;
		int32 fSampleRate;
		float32 fConst2;
		float32 fConst3;
		float32[16] ftbl0;
		int32[2] iVec0;
		int32 iConst4;
		int32[2] iRec2;
		int32[2] iVec1;
		float32 fVslider0;
		int32[2] iVec2;
		int32[2] iRec3;
		int32[2] iRec4;
		int32[2] iVec3;
		float32[3] fVec4;
		int32 iConst5;
		float32 fConst7;
		float32[3] fRec1;
		float32[2] fRec0;
		float32[11] fVec5;
		int32 iConst8;
		float32 fConst9;
		float32[3] fRec6;
		float32[2] fRec5;
		float32[5] fVec6;
		int32 iConst10;
		float32 fConst11;
		float32[3] fRec8;
		float32[2] fRec7;
		int32 IOTA0;
		float32[64] fVec7;
		int32 iConst12;
		float32 fConst13;
		float32[3] fRec10;
		float32[2] fRec9;
		int32[2] iVec8;
		float32[4] fVec9;
		int32 iConst14;
		float32 fConst15;
		float32[3] fRec12;
		float32[2] fRec11;
		float32[15] fVec10;
		int32 iConst16;
		float32 fConst17;
		float32[3] fRec14;
		float32[2] fRec13;
		float32[6] fVec11;
		int32 iConst18;
		float32 fConst19;
		float32[3] fRec16;
		float32[2] fRec15;
		float32[64] fVec12;
		int32 iConst20;
		float32 fConst21;
		float32[3] fRec18;
		float32[2] fRec17;
		float32[16] ftbl1;
		float32 fVslider1;
		int32[2] iVec13;
		int32[2] iRec21;
		int32[2] iVec14;
		float32[5] fVec15;
		int32 iConst22;
		float32 fConst23;
		float32[3] fRec20;
		float32[2] fRec19;
		float32[32] fVec16;
		int32 iConst24;
		float32 fConst25;
		float32[3] fRec23;
		float32[2] fRec22;
		float32[8] fVec17;
		int32 iConst26;
		float32 fConst27;
		float32[3] fRec25;
		float32[2] fRec24;
		float32[128] fVec18;
		int32 iConst28;
		float32 fConst29;
		float32[3] fRec27;
		float32[2] fRec26;
		int32[2] iVec19;
		float32[6] fVec20;
		int32 iConst30;
		float32 fConst31;
		float32[3] fRec29;
		float32[2] fRec28;
		float32[32] fVec21;
		int32 iConst32;
		float32 fConst33;
		float32[3] fRec31;
		float32[2] fRec30;
		float32[10] fVec22;
		int32 iConst34;
		float32 fConst35;
		float32[3] fRec33;
		float32[2] fRec32;
		float32[128] fVec23;
		int32 iConst36;
		float32 fConst37;
		float32[3] fRec35;
		float32[2] fRec34;
		int32[2] iVec24;
		float32[8] fVec25;
		int32 iConst38;
		float32 fConst39;
		float32[3] fRec37;
		float32[2] fRec36;
		float32[64] fVec26;
		int32 iConst40;
		float32 fConst41;
		float32[3] fRec39;
		float32[2] fRec38;
		float32[13] fVec27;
		int32 iConst42;
		float32 fConst43;
		float32[3] fRec41;
		float32[2] fRec40;
		float32[256] fVec28;
		int32 iConst44;
		float32 fConst45;
		float32[3] fRec43;
		float32[2] fRec42;
		float32[16] ftbl2;
		int32 iConst46;
		int32[2] iRec46;
		int32[2] iVec29;
		float32 fVslider2;
		int32[2] iVec30;
		int32[2] iRec47;
		int32[2] iRec48;
		int32[2] iVec31;
		float32[10] fVec32;
		int32 iConst47;
		float32 fConst48;
		float32[3] fRec45;
		float32[2] fRec44;
		float32[64] fVec33;
		int32 iConst49;
		float32 fConst50;
		float32[3] fRec50;
		float32[2] fRec49;
		float32[32] fVec34;
		int32 iConst51;
		float32 fConst52;
		float32[3] fRec52;
		float32[2] fRec51;
		float32[256] fVec35;
		int32 iConst53;
		float32 fConst54;
		float32[3] fRec54;
		float32[2] fRec53;
		int32[2] iVec36;
		float32[13] fVec37;
		int32 iConst55;
		float32 fConst56;
		float32[3] fRec56;
		float32[2] fRec55;
		float32[64] fVec38;
		int32 iConst57;
		float32 fConst58;
		float32[3] fRec58;
		float32[2] fRec57;
		float32[32] fVec39;
		int32 iConst59;
		float32 fConst60;
		float32[3] fRec60;
		float32[2] fRec59;
		float32[256] fVec40;
		int32 iConst61;
		float32 fConst62;
		float32[3] fRec62;
		float32[2] fRec61;
		float32[16] ftbl3;
		float32 fVslider3;
		int32[2] iVec41;
		int32[2] iRec65;
		int32[2] iVec42;
		float32[32] fVec43;
		int32 iConst63;
		float32 fConst64;
		float32[3] fRec64;
		float32[2] fRec63;
		float32[128] fVec44;
		int32 iConst65;
		float32 fConst66;
		float32[3] fRec67;
		float32[2] fRec66;
		float32[32] fVec45;
		int32 iConst67;
		float32 fConst68;
		float32[3] fRec69;
		float32[2] fRec68;
		float32[512] fVec46;
		int32 iConst69;
		float32 fConst70;
		float32[3] fRec71;
		float32[2] fRec70;
		int32[2] iVec47;
		float32[32] fVec48;
		int32 iConst71;
		float32 fConst72;
		float32[3] fRec73;
		float32[2] fRec72;
		float32[128] fVec49;
		int32 iConst73;
		float32 fConst74;
		float32[3] fRec75;
		float32[2] fRec74;
		float32[64] fVec50;
		int32 iConst75;
		float32 fConst76;
		float32[3] fRec77;
		float32[2] fRec76;
		float32[512] fVec51;
		int32 iConst77;
		float32 fConst78;
		float32[3] fRec79;
		float32[2] fRec78;
		int32[2] iVec52;
		float32[32] fVec53;
		int32 iConst79;
		float32 fConst80;
		float32[3] fRec81;
		float32[2] fRec80;
		float32[256] fVec54;
		int32 iConst81;
		float32 fConst82;
		float32[3] fRec83;
		float32[2] fRec82;
		float32[64] fVec55;
		int32 iConst83;
		float32 fConst84;
		float32[3] fRec85;
		float32[2] fRec84;
		float32[1024] fVec56;
		int32 iConst85;
		float32 fConst86;
		float32[3] fRec87;
		float32[2] fRec86;
		float32[16] ftbl4;
		int32 iConst87;
		int32[2] iRec90;
		int32[2] iVec57;
		float32 fVslider4;
		int32[2] iVec58;
		int32[2] iRec91;
		int32[2] iRec92;
		int32[2] iVec59;
		float32[64] fVec60;
		int32 iConst88;
		float32 fConst89;
		float32[3] fRec89;
		float32[2] fRec88;
		float32[256] fVec61;
		int32 iConst90;
		float32 fConst91;
		float32[3] fRec94;
		float32[2] fRec93;
		float32[128] fVec62;
		int32 iConst92;
		float32 fConst93;
		float32[3] fRec96;
		float32[2] fRec95;
		float32[1024] fVec63;
		int32 iConst94;
		float32 fConst95;
		float32[3] fRec98;
		float32[2] fRec97;
		int32[2] iVec64;
		float32[64] fVec65;
		int32 iConst96;
		float32 fConst97;
		float32[3] fRec100;
		float32[2] fRec99;
		float32[256] fVec66;
		int32 iConst98;
		float32 fConst99;
		float32[3] fRec102;
		float32[2] fRec101;
		float32[128] fVec67;
		int32 iConst100;
		float32 fConst101;
		float32[3] fRec104;
		float32[2] fRec103;
		float32[1024] fVec68;
		int32 iConst102;
		float32 fConst103;
		float32[3] fRec106;
		float32[2] fRec105;
		float32[16] ftbl5;
		float32 fVslider5;
		int32[2] iVec69;
		int32[2] iRec109;
		int32[2] iVec70;
		float32[128] fVec71;
		int32 iConst104;
		float32 fConst105;
		float32[3] fRec108;
		float32[2] fRec107;
		float32[512] fVec72;
		int32 iConst106;
		float32 fConst107;
		float32[3] fRec111;
		float32[2] fRec110;
		float32[128] fVec73;
		int32 iConst108;
		float32 fConst109;
		float32[3] fRec113;
		float32[2] fRec112;
		float32[2048] fVec74;
		int32 iConst110;
		float32 fConst111;
		float32[3] fRec115;
		float32[2] fRec114;
		int32[2] iVec75;
		float32[128] fVec76;
		int32 iConst112;
		float32 fConst113;
		float32[3] fRec117;
		float32[2] fRec116;
		float32[512] fVec77;
		int32 iConst114;
		float32 fConst115;
		float32[3] fRec119;
		float32[2] fRec118;
		float32[256] fVec78;
		int32 iConst116;
		float32 fConst117;
		float32[3] fRec121;
		float32[2] fRec120;
		float32[2048] fVec79;
		int32 iConst118;
		float32 fConst119;
		float32[3] fRec123;
		float32[2] fRec122;
		int32[2] iVec80;
		float32[128] fVec81;
		int32 iConst120;
		float32 fConst121;
		float32[3] fRec125;
		float32[2] fRec124;
		float32[4096] fVec82;
		int32 iConst122;
		float32 fConst123;
		float32[3] fRec127;
		float32[2] fRec126;
		float32[256] fVec83;
		int32 iConst124;
		float32 fConst125;
		float32[3] fRec129;
		float32[2] fRec128;
		float32[1024] fVec84;
		int32 iConst126;
		float32 fConst127;
		float32[3] fRec131;
		float32[2] fRec130;
		int32[2] iVec85;
		float32[3] fVec86;
		int32 iConst128;
		float32 fConst129;
		float32[3] fRec133;
		float32[2] fRec132;
		float32[10] fVec87;
		int32 iConst130;
		float32 fConst131;
		float32[3] fRec135;
		float32[2] fRec134;
		float32[4] fVec88;
		int32 iConst132;
		float32 fConst133;
		float32[3] fRec137;
		float32[2] fRec136;
		float32[64] fVec89;
		int32 iConst134;
		float32 fConst135;
		float32[3] fRec139;
		float32[2] fRec138;
		int32[2] iVec90;
		float32[3] fVec91;
		int32 iConst136;
		float32 fConst137;
		float32[3] fRec141;
		float32[2] fRec140;
		float32[13] fVec92;
		int32 iConst138;
		float32 fConst139;
		float32[3] fRec143;
		float32[2] fRec142;
		float32[5] fVec93;
		int32 iConst140;
		float32 fConst141;
		float32[3] fRec145;
		float32[2] fRec144;
		float32[64] fVec94;
		int32 iConst142;
		float32 fConst143;
		float32[3] fRec147;
		float32[2] fRec146;
		int32[2] iVec95;
		float32[4] fVec96;
		int32 iConst144;
		float32 fConst145;
		float32[3] fRec149;
		float32[2] fRec148;
		float32[32] fVec97;
		int32 iConst146;
		float32 fConst147;
		float32[3] fRec151;
		float32[2] fRec150;
		float32[7] fVec98;
		int32 iConst148;
		float32 fConst149;
		float32[3] fRec153;
		float32[2] fRec152;
		float32[128] fVec99;
		int32 iConst150;
		float32 fConst151;
		float32[3] fRec155;
		float32[2] fRec154;
		int32[2] iVec100;
		float32[5] fVec101;
		int32 iConst152;
		float32 fConst153;
		float32[3] fRec157;
		float32[2] fRec156;
		float32[32] fVec102;
		int32 iConst154;
		float32 fConst155;
		float32[3] fRec159;
		float32[2] fRec158;
		float32[9] fVec103;
		int32 iConst156;
		float32 fConst157;
		float32[3] fRec161;
		float32[2] fRec160;
		float32[128] fVec104;
		int32 iConst158;
		float32 fConst159;
		float32[3] fRec163;
		float32[2] fRec162;
		int32[2] iVec105;
		float32[7] fVec106;
		int32 iConst160;
		float32 fConst161;
		float32[3] fRec165;
		float32[2] fRec164;
		float32[32] fVec107;
		int32 iConst162;
		float32 fConst163;
		float32[3] fRec167;
		float32[2] fRec166;
		float32[11] fVec108;
		int32 iConst164;
		float32 fConst165;
		float32[3] fRec169;
		float32[2] fRec168;
		float32[128] fVec109;
		int32 iConst166;
		float32 fConst167;
		float32[3] fRec171;
		float32[2] fRec170;
		int32[2] iVec110;
		float32[9] fVec111;
		int32 iConst168;
		float32 fConst169;
		float32[3] fRec173;
		float32[2] fRec172;
		float32[64] fVec112;
		int32 iConst170;
		float32 fConst171;
		float32[3] fRec175;
		float32[2] fRec174;
		float32[15] fVec113;
		int32 iConst172;
		float32 fConst173;
		float32[3] fRec177;
		float32[2] fRec176;
		float32[256] fVec114;
		int32 iConst174;
		float32 fConst175;
		float32[3] fRec179;
		float32[2] fRec178;
		int32[2] iVec115;
		float32[12] fVec116;
		int32 iConst176;
		float32 fConst177;
		float32[3] fRec181;
		float32[2] fRec180;
		float32[64] fVec117;
		int32 iConst178;
		float32 fConst179;
		float32[3] fRec183;
		float32[2] fRec182;
		float32[32] fVec118;
		int32 iConst180;
		float32 fConst181;
		float32[3] fRec185;
		float32[2] fRec184;
		float32[256] fVec119;
		int32 iConst182;
		float32 fConst183;
		float32[3] fRec187;
		float32[2] fRec186;
		int32[2] iVec120;
		float32[15] fVec121;
		int32 iConst184;
		float32 fConst185;
		float32[3] fRec189;
		float32[2] fRec188;
		float32[128] fVec122;
		int32 iConst186;
		float32 fConst187;
		float32[3] fRec191;
		float32[2] fRec190;
		float32[32] fVec123;
		int32 iConst188;
		float32 fConst189;
		float32[3] fRec193;
		float32[2] fRec192;
		float32[512] fVec124;
		int32 iConst190;
		float32 fConst191;
		float32[3] fRec195;
		float32[2] fRec194;
		int32[2] iVec125;
		float32[32] fVec126;
		int32 iConst192;
		float32 fConst193;
		float32[3] fRec197;
		float32[2] fRec196;
		float32[128] fVec127;
		int32 iConst194;
		float32 fConst195;
		float32[3] fRec199;
		float32[2] fRec198;
		float32[64] fVec128;
		int32 iConst196;
		float32 fConst197;
		float32[3] fRec201;
		float32[2] fRec200;
		float32[512] fVec129;
		int32 iConst198;
		float32 fConst199;
		float32[3] fRec203;
		float32[2] fRec202;
		int32[2] iVec130;
		float32[32] fVec131;
		int32 iConst200;
		float32 fConst201;
		float32[3] fRec205;
		float32[2] fRec204;
		float32[128] fVec132;
		int32 iConst202;
		float32 fConst203;
		float32[3] fRec207;
		float32[2] fRec206;
		float32[64] fVec133;
		int32 iConst204;
		float32 fConst205;
		float32[3] fRec209;
		float32[2] fRec208;
		float32[512] fVec134;
		int32 iConst206;
		float32 fConst207;
		float32[3] fRec211;
		float32[2] fRec210;
		int32[2] iVec135;
		float32[64] fVec136;
		int32 iConst208;
		float32 fConst209;
		float32[3] fRec213;
		float32[2] fRec212;
		float32[256] fVec137;
		int32 iConst210;
		float32 fConst211;
		float32[3] fRec215;
		float32[2] fRec214;
		float32[64] fVec138;
		int32 iConst212;
		float32 fConst213;
		float32[3] fRec217;
		float32[2] fRec216;
		float32[1024] fVec139;
		int32 iConst214;
		float32 fConst215;
		float32[3] fRec219;
		float32[2] fRec218;
		int32[2] iVec140;
		float32[64] fVec141;
		int32 iConst216;
		float32 fConst217;
		float32[3] fRec221;
		float32[2] fRec220;
		float32[256] fVec142;
		int32 iConst218;
		float32 fConst219;
		float32[3] fRec223;
		float32[2] fRec222;
		float32[128] fVec143;
		int32 iConst220;
		float32 fConst221;
		float32[3] fRec225;
		float32[2] fRec224;
		float32[1024] fVec144;
		int32 iConst222;
		float32 fConst223;
		float32[3] fRec227;
		float32[2] fRec226;
		int32[2] iVec145;
		float32[64] fVec146;
		int32 iConst224;
		float32 fConst225;
		float32[3] fRec229;
		float32[2] fRec228;
		float32[512] fVec147;
		int32 iConst226;
		float32 fConst227;
		float32[3] fRec231;
		float32[2] fRec230;
		float32[128] fVec148;
		int32 iConst228;
		float32 fConst229;
		float32[3] fRec233;
		float32[2] fRec232;
		float32[2048] fVec149;
		int32 iConst230;
		float32 fConst231;
		float32[3] fRec235;
		float32[2] fRec234;
		int32[2] iVec150;
		float32[128] fVec151;
		int32 iConst232;
		float32 fConst233;
		float32[3] fRec237;
		float32[2] fRec236;
		float32[512] fVec152;
		int32 iConst234;
		float32 fConst235;
		float32[3] fRec239;
		float32[2] fRec238;
		float32[256] fVec153;
		int32 iConst236;
		float32 fConst237;
		float32[3] fRec241;
		float32[2] fRec240;
		float32[2048] fVec154;
		int32 iConst238;
		float32 fConst239;
		float32[3] fRec243;
		float32[2] fRec242;
		int32[2] iVec155;
		float32[128] fVec156;
		int32 iConst240;
		float32 fConst241;
		float32[3] fRec245;
		float32[2] fRec244;
		float32[2048] fVec157;
		int32 iConst242;
		float32 fConst243;
		float32[3] fRec247;
		float32[2] fRec246;
		float32[256] fVec158;
		int32 iConst244;
		float32 fConst245;
		float32[3] fRec249;
		float32[2] fRec248;
		float32[512] fVec159;
		int32 iConst246;
		float32 fConst247;
		float32[3] fRec251;
		float32[2] fRec250;
		bool fUpdated;
		int32[12] iControl;
		float32[6] fControl;
		
		// Instrument Hand0 [init = 3.0f, min = 0.0f, max = 5.0f, step = 1.0f] 
		event eventfVslider5 (float32 val) { fUpdated ||= (fVslider5 != val); fVslider5 = val; } 
		// Instrument Hand1 [init = 3.0f, min = 0.0f, max = 5.0f, step = 1.0f] 
		event eventfVslider4 (float32 val) { fUpdated ||= (fVslider4 != val); fVslider4 = val; } 
		// Instrument Hand2 [init = 2.0f, min = 0.0f, max = 5.0f, step = 1.0f] 
		event eventfVslider3 (float32 val) { fUpdated ||= (fVslider3 != val); fVslider3 = val; } 
		// Instrument Hand3 [init = 2.0f, min = 0.0f, max = 5.0f, step = 1.0f] 
		event eventfVslider2 (float32 val) { fUpdated ||= (fVslider2 != val); fVslider2 = val; } 
		// Instrument Hand4 [init = 4.0f, min = 0.0f, max = 5.0f, step = 1.0f] 
		event eventfVslider1 (float32 val) { fUpdated ||= (fVslider1 != val); fVslider1 = val; } 
		// Instrument Hand5 [init = 4.0f, min = 0.0f, max = 5.0f, step = 1.0f] 
		event eventfVslider0 (float32 val) { fUpdated ||= (fVslider0 != val); fVslider0 = val; } 
		
		struct STunedBar6SIG0
		{
		}

		void instanceInitSTunedBar6SIG0 (STunedBar6SIG0& this, int sample_rate)
		{
		}
		
		void fillSTunedBar6SIG0_16 (STunedBar6SIG0& this, int count, float32[16]& table)
		{
			for (int32 i1 = 0; i1 < count; i1 = i1 + 1) {
				table.at (i1) = 0.0f;
			}
		}
		STunedBar6SIG0 newSTunedBar6SIG0() { STunedBar6SIG0 obj; return obj; }
		void deleteSTunedBar6SIG0 (STunedBar6SIG0& this) {}
		
		float32 copysign(float32 x, float32 y) { return abs(x) * ((y < 0.0f) ? -1.0f : 1.0f); }
		float32 round(float32 x) { return float32(roundToInt(x)); }
		
		int getNumInputs() { return 0; }
		
		int getNumOuputs() { return 2; }
		
		void classInit (int sample_rate)
		{
		}
		
		void instanceConstants (int sample_rate)
		{
			fSampleRate = sample_rate;
			float32 fConst0 = min (1.92e+05f, max (1.0f, float32 (fSampleRate)));
			float32 fConst1 = 100.53097f / fConst0;
			fConst2 = pow (1.0f - fConst1, 2.0f);
			fConst3 = 0.5f * (1.0f - fConst2);
			STunedBar6SIG0 sig0 = newSTunedBar6SIG0();
			instanceInitSTunedBar6SIG0 (sig0, sample_rate);
			fillSTunedBar6SIG0_16 (sig0, 16, ftbl0);
			iConst4 = int32 (0.125f * fConst0);
			iConst5 = int32 (min (4096.0f, max (0.0f, 1.2478635e-05f * fConst0)));
			float32 fConst6 = fConst1 - 1.0f;
			fConst7 = 2.0f * cos (503515.47f / fConst0) * fConst6;
			iConst8 = int32 (min (4096.0f, max (0.0f, 5.60931e-05f * fConst0)));
			fConst9 = 2.0f * cos (112013.516f / fConst0) * fConst6;
			iConst10 = int32 (min (4096.0f, max (0.0f, 2.1037018e-05f * fConst0)));
			fConst11 = 2.0f * cos (298672.8f / fConst0) * fConst6;
			iConst12 = int32 (min (4096.0f, max (0.0f, 0.00022548524f * fConst0)));
			fConst13 = 2.0f * cos (27865.174f / fConst0) * fConst6;
			iConst14 = int32 (min (4096.0f, max (0.0f, 1.665781e-05f * fConst0)));
			fConst15 = 2.0f * cos (377191.53f / fConst0) * fConst6;
			iConst16 = int32 (min (4096.0f, max (0.0f, 7.487905e-05f * fConst0)));
			fConst17 = 2.0f * cos (83911.125f / fConst0) * fConst6;
			iConst18 = int32 (min (4096.0f, max (0.0f, 2.8082453e-05f * fConst0)));
			fConst19 = 2.0f * cos (223740.61f / fConst0) * fConst6;
			iConst20 = int32 (min (4096.0f, max (0.0f, 0.00030100174f * fConst0)));
			fConst21 = 2.0f * cos (20874.25f / fConst0) * fConst6;
			instanceInitSTunedBar6SIG0 (sig0, sample_rate);
			fillSTunedBar6SIG0_16 (sig0, 16, ftbl1);
			iConst22 = int32 (min (4096.0f, max (0.0f, 2.2234686e-05f * fConst0)));
			fConst23 = 2.0f * cos (282584.84f / fConst0) * fConst6;
			iConst24 = int32 (min (4096.0f, max (0.0f, 9.9947836e-05f * fConst0)));
			fConst25 = 2.0f * cos (62864.645f / fConst0) * fConst6;
			iConst26 = int32 (min (4096.0f, max (0.0f, 3.748419e-05f * fConst0)));
			fConst27 = 2.0f * cos (167622.28f / fConst0) * fConst6;
			iConst28 = int32 (min (4096.0f, max (0.0f, 0.00040177425f * fConst0)));
			fConst29 = 2.0f * cos (15638.597f / fConst0) * fConst6;
			iConst30 = int32 (min (4096.0f, max (0.0f, 2.9679319e-05f * fConst0)));
			fConst31 = 2.0f * cos (211702.47f / fConst0) * fConst6;
			iConst32 = int32 (min (4096.0f, max (0.0f, 0.00013341244f * fConst0)));
			fConst33 = 2.0f * cos (47095.95f / fConst0) * fConst6;
			iConst34 = int32 (min (4096.0f, max (0.0f, 5.0034672e-05f * fConst0)));
			fConst35 = 2.0f * cos (125576.63f / fConst0) * fConst6;
			iConst36 = int32 (min (4096.0f, max (0.0f, 0.0005362966f * fConst0)));
			fConst37 = 2.0f * cos (11715.879f / fConst0) * fConst6;
			iConst38 = int32 (min (4096.0f, max (0.0f, 3.7396778e-05f * fConst0)));
			fConst39 = 2.0f * cos (168014.1f / fConst0) * fConst6;
			iConst40 = int32 (min (4096.0f, max (0.0f, 0.00016810342f * fConst0)));
			fConst41 = 2.0f * cos (37376.902f / fConst0) * fConst6;
			iConst42 = int32 (min (4096.0f, max (0.0f, 6.304509e-05f * fConst0)));
			fConst43 = 2.0f * cos (99661.766f / fConst0) * fConst6;
			iConst44 = int32 (min (4096.0f, max (0.0f, 0.00067574874f * fConst0)));
			fConst45 = 2.0f * cos (9298.109f / fConst0) * fConst6;
			instanceInitSTunedBar6SIG0 (sig0, sample_rate);
			fillSTunedBar6SIG0_16 (sig0, 16, ftbl2);
			iConst46 = int32 (0.25f * fConst0);
			iConst47 = int32 (min (4096.0f, max (0.0f, 4.991454e-05f * fConst0)));
			fConst48 = 2.0f * cos (125878.87f / fConst0) * fConst6;
			iConst49 = int32 (min (4096.0f, max (0.0f, 0.0002243724f * fConst0)));
			fConst50 = 2.0f * cos (28003.379f / fConst0) * fConst6;
			iConst51 = int32 (min (4096.0f, max (0.0f, 8.414807e-05f * fConst0)));
			fConst52 = 2.0f * cos (74668.2f / fConst0) * fConst6;
			iConst53 = int32 (min (4096.0f, max (0.0f, 0.000901941f * fConst0)));
			fConst54 = 2.0f * cos (6966.2935f / fConst0) * fConst6;
			iConst55 = int32 (min (4096.0f, max (0.0f, 6.663124e-05f * fConst0)));
			fConst56 = 2.0f * cos (94297.88f / fConst0) * fConst6;
			iConst57 = int32 (min (4096.0f, max (0.0f, 0.0002995162f * fConst0)));
			fConst58 = 2.0f * cos (20977.781f / fConst0) * fConst6;
			iConst59 = int32 (min (4096.0f, max (0.0f, 0.00011232981f * fConst0)));
			fConst60 = 2.0f * cos (55935.152f / fConst0) * fConst6;
			iConst61 = int32 (min (4096.0f, max (0.0f, 0.001204007f * fConst0)));
			fConst62 = 2.0f * cos (5218.5625f / fConst0) * fConst6;
			instanceInitSTunedBar6SIG0 (sig0, sample_rate);
			fillSTunedBar6SIG0_16 (sig0, 16, ftbl3);
			iConst63 = int32 (min (4096.0f, max (0.0f, 8.8938745e-05f * fConst0)));
			fConst64 = 2.0f * cos (70646.21f / fConst0) * fConst6;
			iConst65 = int32 (min (4096.0f, max (0.0f, 0.00039979134f * fConst0)));
			fConst66 = 2.0f * cos (15716.161f / fConst0) * fConst6;
			iConst67 = int32 (min (4096.0f, max (0.0f, 0.00014993676f * fConst0)));
			fConst68 = 2.0f * cos (41905.57f / fConst0) * fConst6;
			iConst69 = int32 (min (4096.0f, max (0.0f, 0.001607097f * fConst0)));
			fConst70 = 2.0f * cos (3909.6492f / fConst0) * fConst6;
			iConst71 = int32 (min (4096.0f, max (0.0f, 0.000118717275f * fConst0)));
			fConst72 = 2.0f * cos (52925.617f / fConst0) * fConst6;
			iConst73 = int32 (min (4096.0f, max (0.0f, 0.00053364976f * fConst0)));
			fConst74 = 2.0f * cos (11773.987f / fConst0) * fConst6;
			iConst75 = int32 (min (4096.0f, max (0.0f, 0.00020013869f * fConst0)));
			fConst76 = 2.0f * cos (31394.158f / fConst0) * fConst6;
			iConst77 = int32 (min (4096.0f, max (0.0f, 0.0021451863f * fConst0)));
			fConst78 = 2.0f * cos (2928.9697f / fConst0) * fConst6;
			iConst79 = int32 (min (4096.0f, max (0.0f, 0.00014958711f * fConst0)));
			fConst80 = 2.0f * cos (42003.523f / fConst0) * fConst6;
			iConst81 = int32 (min (4096.0f, max (0.0f, 0.0006724137f * fConst0)));
			fConst82 = 2.0f * cos (9344.226f / fConst0) * fConst6;
			iConst83 = int32 (min (4096.0f, max (0.0f, 0.00025218035f * fConst0)));
			fConst84 = 2.0f * cos (24915.441f / fConst0) * fConst6;
			iConst85 = int32 (min (4096.0f, max (0.0f, 0.002702995f * fConst0)));
			fConst86 = 2.0f * cos (2324.5273f / fConst0) * fConst6;
			instanceInitSTunedBar6SIG0 (sig0, sample_rate);
			fillSTunedBar6SIG0_16 (sig0, 16, ftbl4);
			iConst87 = int32 (0.5f * fConst0);
			iConst88 = int32 (min (4096.0f, max (0.0f, 0.00019965816f * fConst0)));
			fConst89 = 2.0f * cos (31469.717f / fConst0) * fConst6;
			iConst90 = int32 (min (4096.0f, max (0.0f, 0.0008974896f * fConst0)));
			fConst91 = 2.0f * cos (7000.8447f / fConst0) * fConst6;
			iConst92 = int32 (min (4096.0f, max (0.0f, 0.0003365923f * fConst0)));
			fConst93 = 2.0f * cos (18667.05f / fConst0) * fConst6;
			iConst94 = int32 (min (4096.0f, max (0.0f, 0.003607764f * fConst0)));
			fConst95 = 2.0f * cos (1741.5734f / fConst0) * fConst6;
			iConst96 = int32 (min (4096.0f, max (0.0f, 0.00026652496f * fConst0)));
			fConst97 = 2.0f * cos (23574.47f / fConst0) * fConst6;
			iConst98 = int32 (min (4096.0f, max (0.0f, 0.0011980648f * fConst0)));
			fConst99 = 2.0f * cos (5244.4453f / fConst0) * fConst6;
			iConst100 = int32 (min (4096.0f, max (0.0f, 0.00044931925f * fConst0)));
			fConst101 = 2.0f * cos (13983.788f / fConst0) * fConst6;
			iConst102 = int32 (min (4096.0f, max (0.0f, 0.004816028f * fConst0)));
			fConst103 = 2.0f * cos (1304.6406f / fConst0) * fConst6;
			instanceInitSTunedBar6SIG0 (sig0, sample_rate);
			fillSTunedBar6SIG0_16 (sig0, 16, ftbl5);
			iConst104 = int32 (min (4096.0f, max (0.0f, 0.00035575498f * fConst0)));
			fConst105 = 2.0f * cos (17661.553f / fConst0) * fConst6;
			iConst106 = int32 (min (4096.0f, max (0.0f, 0.0015991654f * fConst0)));
			fConst107 = 2.0f * cos (3929.0403f / fConst0) * fConst6;
			iConst108 = int32 (min (4096.0f, max (0.0f, 0.00059974706f * fConst0)));
			fConst109 = 2.0f * cos (10476.393f / fConst0) * fConst6;
			iConst110 = int32 (min (4096.0f, max (0.0f, 0.006428388f * fConst0)));
			fConst111 = 2.0f * cos (977.4123f / fConst0) * fConst6;
			iConst112 = int32 (min (4096.0f, max (0.0f, 0.0004748691f * fConst0)));
			fConst113 = 2.0f * cos (13231.404f / fConst0) * fConst6;
			iConst114 = int32 (min (4096.0f, max (0.0f, 0.002134599f * fConst0)));
			fConst115 = 2.0f * cos (2943.4968f / fConst0) * fConst6;
			iConst116 = int32 (min (4096.0f, max (0.0f, 0.00080055476f * fConst0)));
			fConst117 = 2.0f * cos (7848.5396f / fConst0) * fConst6;
			iConst118 = int32 (min (4096.0f, max (0.0f, 0.008580745f * fConst0)));
			fConst119 = 2.0f * cos (732.24243f / fConst0) * fConst6;
			iConst120 = int32 (min (4096.0f, max (0.0f, 0.00059834844f * fConst0)));
			fConst121 = 2.0f * cos (10500.881f / fConst0) * fConst6;
			iConst122 = int32 (min (4096.0f, max (0.0f, 0.01081198f * fConst0)));
			fConst123 = 2.0f * cos (581.13184f / fConst0) * fConst6;
			iConst124 = int32 (min (4096.0f, max (0.0f, 0.0010087214f * fConst0)));
			fConst125 = 2.0f * cos (6228.8604f / fConst0) * fConst6;
			iConst126 = int32 (min (4096.0f, max (0.0f, 0.0026896547f * fConst0)));
			fConst127 = 2.0f * cos (2336.0564f / fConst0) * fConst6;
			iConst128 = int32 (min (4096.0f, max (0.0f, 1.1117343e-05f * fConst0)));
			fConst129 = 2.0f * cos (565169.7f / fConst0) * fConst6;
			iConst130 = int32 (min (4096.0f, max (0.0f, 4.9973918e-05f * fConst0)));
			fConst131 = 2.0f * cos (125729.29f / fConst0) * fConst6;
			iConst132 = int32 (min (4096.0f, max (0.0f, 1.8742096e-05f * fConst0)));
			fConst133 = 2.0f * cos (335244.56f / fConst0) * fConst6;
			iConst134 = int32 (min (4096.0f, max (0.0f, 0.00020088712f * fConst0)));
			fConst135 = 2.0f * cos (31277.193f / fConst0) * fConst6;
			iConst136 = int32 (min (4096.0f, max (0.0f, 1.4839659e-05f * fConst0)));
			fConst137 = 2.0f * cos (423404.94f / fConst0) * fConst6;
			iConst138 = int32 (min (4096.0f, max (0.0f, 6.670622e-05f * fConst0)));
			fConst139 = 2.0f * cos (94191.9f / fConst0) * fConst6;
			iConst140 = int32 (min (4096.0f, max (0.0f, 2.5017336e-05f * fConst0)));
			fConst141 = 2.0f * cos (251153.27f / fConst0) * fConst6;
			iConst142 = int32 (min (4096.0f, max (0.0f, 0.0002681483f * fConst0)));
			fConst143 = 2.0f * cos (23431.758f / fConst0) * fConst6;
			iConst144 = int32 (min (4096.0f, max (0.0f, 1.8698389e-05f * fConst0)));
			fConst145 = 2.0f * cos (336028.2f / fConst0) * fConst6;
			iConst146 = int32 (min (4096.0f, max (0.0f, 8.405171e-05f * fConst0)));
			fConst147 = 2.0f * cos (74753.805f / fConst0) * fConst6;
			iConst148 = int32 (min (4096.0f, max (0.0f, 3.1522544e-05f * fConst0)));
			fConst149 = 2.0f * cos (199323.53f / fConst0) * fConst6;
			iConst150 = int32 (min (4096.0f, max (0.0f, 0.00033787437f * fConst0)));
			fConst151 = 2.0f * cos (18596.219f / fConst0) * fConst6;
			iConst152 = int32 (min (4096.0f, max (0.0f, 2.495727e-05f * fConst0)));
			fConst153 = 2.0f * cos (251757.73f / fConst0) * fConst6;
			iConst154 = int32 (min (4096.0f, max (0.0f, 0.0001121862f * fConst0)));
			fConst155 = 2.0f * cos (56006.758f / fConst0) * fConst6;
			iConst156 = int32 (min (4096.0f, max (0.0f, 4.2074036e-05f * fConst0)));
			fConst157 = 2.0f * cos (149336.4f / fConst0) * fConst6;
			iConst158 = int32 (min (4096.0f, max (0.0f, 0.0004509705f * fConst0)));
			fConst159 = 2.0f * cos (13932.587f / fConst0) * fConst6;
			iConst160 = int32 (min (4096.0f, max (0.0f, 3.331562e-05f * fConst0)));
			fConst161 = 2.0f * cos (188595.77f / fConst0) * fConst6;
			iConst162 = int32 (min (4096.0f, max (0.0f, 0.0001497581f * fConst0)));
			fConst163 = 2.0f * cos (41955.562f / fConst0) * fConst6;
			iConst164 = int32 (min (4096.0f, max (0.0f, 5.6164907e-05f * fConst0)));
			fConst165 = 2.0f * cos (111870.305f / fConst0) * fConst6;
			iConst166 = int32 (min (4096.0f, max (0.0f, 0.0006020035f * fConst0)));
			fConst167 = 2.0f * cos (10437.125f / fConst0) * fConst6;
			iConst168 = int32 (min (4096.0f, max (0.0f, 4.4469372e-05f * fConst0)));
			fConst169 = 2.0f * cos (141292.42f / fConst0) * fConst6;
			iConst170 = int32 (min (4096.0f, max (0.0f, 0.00019989567f * fConst0)));
			fConst171 = 2.0f * cos (31432.322f / fConst0) * fConst6;
			iConst172 = int32 (min (4096.0f, max (0.0f, 7.496838e-05f * fConst0)));
			fConst173 = 2.0f * cos (83811.14f / fConst0) * fConst6;
			iConst174 = int32 (min (4096.0f, max (0.0f, 0.0008035485f * fConst0)));
			fConst175 = 2.0f * cos (7819.2983f / fConst0) * fConst6;
			iConst176 = int32 (min (4096.0f, max (0.0f, 5.9358637e-05f * fConst0)));
			fConst177 = 2.0f * cos (105851.234f / fConst0) * fConst6;
			iConst178 = int32 (min (4096.0f, max (0.0f, 0.00026682488f * fConst0)));
			fConst179 = 2.0f * cos (23547.975f / fConst0) * fConst6;
			iConst180 = int32 (min (4096.0f, max (0.0f, 0.000100069345f * fConst0)));
			fConst181 = 2.0f * cos (62788.316f / fConst0) * fConst6;
			iConst182 = int32 (min (4096.0f, max (0.0f, 0.0010725931f * fConst0)));
			fConst183 = 2.0f * cos (5857.9395f / fConst0) * fConst6;
			iConst184 = int32 (min (4096.0f, max (0.0f, 7.4793556e-05f * fConst0)));
			fConst185 = 2.0f * cos (84007.05f / fConst0) * fConst6;
			iConst186 = int32 (min (4096.0f, max (0.0f, 0.00033620684f * fConst0)));
			fConst187 = 2.0f * cos (18688.451f / fConst0) * fConst6;
			iConst188 = int32 (min (4096.0f, max (0.0f, 0.00012609018f * fConst0)));
			fConst189 = 2.0f * cos (49830.883f / fConst0) * fConst6;
			iConst190 = int32 (min (4096.0f, max (0.0f, 0.0013514975f * fConst0)));
			fConst191 = 2.0f * cos (4649.0547f / fConst0) * fConst6;
			iConst192 = int32 (min (4096.0f, max (0.0f, 9.982908e-05f * fConst0)));
			fConst193 = 2.0f * cos (62939.434f / fConst0) * fConst6;
			iConst194 = int32 (min (4096.0f, max (0.0f, 0.0004487448f * fConst0)));
			fConst195 = 2.0f * cos (14001.689f / fConst0) * fConst6;
			iConst196 = int32 (min (4096.0f, max (0.0f, 0.00016829614f * fConst0)));
			fConst197 = 2.0f * cos (37334.1f / fConst0) * fConst6;
			iConst198 = int32 (min (4096.0f, max (0.0f, 0.001803882f * fConst0)));
			fConst199 = 2.0f * cos (3483.1467f / fConst0) * fConst6;
			iConst200 = int32 (min (4096.0f, max (0.0f, 0.00013326248f * fConst0)));
			fConst201 = 2.0f * cos (47148.94f / fConst0) * fConst6;
			iConst202 = int32 (min (4096.0f, max (0.0f, 0.0005990324f * fConst0)));
			fConst203 = 2.0f * cos (10488.891f / fConst0) * fConst6;
			iConst204 = int32 (min (4096.0f, max (0.0f, 0.00022465963f * fConst0)));
			fConst205 = 2.0f * cos (27967.576f / fConst0) * fConst6;
			iConst206 = int32 (min (4096.0f, max (0.0f, 0.002408014f * fConst0)));
			fConst207 = 2.0f * cos (2609.2812f / fConst0) * fConst6;
			iConst208 = int32 (min (4096.0f, max (0.0f, 0.00017787749f * fConst0)));
			fConst209 = 2.0f * cos (35323.105f / fConst0) * fConst6;
			iConst210 = int32 (min (4096.0f, max (0.0f, 0.0007995827f * fConst0)));
			fConst211 = 2.0f * cos (7858.0806f / fConst0) * fConst6;
			iConst212 = int32 (min (4096.0f, max (0.0f, 0.00029987353f * fConst0)));
			fConst213 = 2.0f * cos (20952.785f / fConst0) * fConst6;
			iConst214 = int32 (min (4096.0f, max (0.0f, 0.003214194f * fConst0)));
			fConst215 = 2.0f * cos (1954.8246f / fConst0) * fConst6;
			iConst216 = int32 (min (4096.0f, max (0.0f, 0.00023743455f * fConst0)));
			fConst217 = 2.0f * cos (26462.809f / fConst0) * fConst6;
			iConst218 = int32 (min (4096.0f, max (0.0f, 0.0010672995f * fConst0)));
			fConst219 = 2.0f * cos (5886.9937f / fConst0) * fConst6;
			iConst220 = int32 (min (4096.0f, max (0.0f, 0.00040027738f * fConst0)));
			fConst221 = 2.0f * cos (15697.079f / fConst0) * fConst6;
			iConst222 = int32 (min (4096.0f, max (0.0f, 0.0042903726f * fConst0)));
			fConst223 = 2.0f * cos (1464.4849f / fConst0) * fConst6;
			iConst224 = int32 (min (4096.0f, max (0.0f, 0.00029917422f * fConst0)));
			fConst225 = 2.0f * cos (21001.762f / fConst0) * fConst6;
			iConst226 = int32 (min (4096.0f, max (0.0f, 0.0013448274f * fConst0)));
			fConst227 = 2.0f * cos (4672.113f / fConst0) * fConst6;
			iConst228 = int32 (min (4096.0f, max (0.0f, 0.0005043607f * fConst0)));
			fConst229 = 2.0f * cos (12457.721f / fConst0) * fConst6;
			iConst230 = int32 (min (4096.0f, max (0.0f, 0.00540599f * fConst0)));
			fConst231 = 2.0f * cos (1162.2637f / fConst0) * fConst6;
			iConst232 = int32 (min (4096.0f, max (0.0f, 0.0003993163f * fConst0)));
			fConst233 = 2.0f * cos (15734.858f / fConst0) * fConst6;
			iConst234 = int32 (min (4096.0f, max (0.0f, 0.0017949792f * fConst0)));
			fConst235 = 2.0f * cos (3500.4224f / fConst0) * fConst6;
			iConst236 = int32 (min (4096.0f, max (0.0f, 0.0006731846f * fConst0)));
			fConst237 = 2.0f * cos (9333.525f / fConst0) * fConst6;
			iConst238 = int32 (min (4096.0f, max (0.0f, 0.007215528f * fConst0)));
			fConst239 = 2.0f * cos (870.7867f / fConst0) * fConst6;
			iConst240 = int32 (min (4096.0f, max (0.0f, 0.0005330499f * fConst0)));
			fConst241 = 2.0f * cos (11787.235f / fConst0) * fConst6;
			iConst242 = int32 (min (4096.0f, max (0.0f, 0.009632056f * fConst0)));
			fConst243 = 2.0f * cos (652.3203f / fConst0) * fConst6;
			iConst244 = int32 (min (4096.0f, max (0.0f, 0.0008986385f * fConst0)));
			fConst245 = 2.0f * cos (6991.894f / fConst0) * fConst6;
			iConst246 = int32 (min (4096.0f, max (0.0f, 0.0023961295f * fConst0)));
			fConst247 = 2.0f * cos (2622.2227f / fConst0) * fConst6;
			deleteSTunedBar6SIG0 (sig0);
		}
		
		void instanceResetUserInterface()
		{
			fUpdated = true;
			fVslider0 = 4.0f;
			fVslider1 = 4.0f;
			fVslider2 = 2.0f;
			fVslider3 = 2.0f;
			fVslider4 = 3.0f;
			fVslider5 = 3.0f;
		}
		
		void instanceClear()
		{
			for (int32 l0 = 0; l0 < 2; l0 = l0 + 1) {
				iVec0.at (l0) = 0;
			}
			for (int32 l1 = 0; l1 < 2; l1 = l1 + 1) {
				iRec2.at (l1) = 0;
			}
			for (int32 l2 = 0; l2 < 2; l2 = l2 + 1) {
				iVec1.at (l2) = 0;
			}
			for (int32 l3 = 0; l3 < 2; l3 = l3 + 1) {
				iVec2.at (l3) = 0;
			}
			for (int32 l4 = 0; l4 < 2; l4 = l4 + 1) {
				iRec3.at (l4) = 0;
			}
			for (int32 l5 = 0; l5 < 2; l5 = l5 + 1) {
				iRec4.at (l5) = 0;
			}
			for (int32 l6 = 0; l6 < 2; l6 = l6 + 1) {
				iVec3.at (l6) = 0;
			}
			for (int32 l7 = 0; l7 < 3; l7 = l7 + 1) {
				fVec4.at (l7) = 0.0f;
			}
			for (int32 l8 = 0; l8 < 3; l8 = l8 + 1) {
				fRec1.at (l8) = 0.0f;
			}
			for (int32 l9 = 0; l9 < 2; l9 = l9 + 1) {
				fRec0.at (l9) = 0.0f;
			}
			for (int32 l10 = 0; l10 < 11; l10 = l10 + 1) {
				fVec5.at (l10) = 0.0f;
			}
			for (int32 l11 = 0; l11 < 3; l11 = l11 + 1) {
				fRec6.at (l11) = 0.0f;
			}
			for (int32 l12 = 0; l12 < 2; l12 = l12 + 1) {
				fRec5.at (l12) = 0.0f;
			}
			for (int32 l13 = 0; l13 < 5; l13 = l13 + 1) {
				fVec6.at (l13) = 0.0f;
			}
			for (int32 l14 = 0; l14 < 3; l14 = l14 + 1) {
				fRec8.at (l14) = 0.0f;
			}
			for (int32 l15 = 0; l15 < 2; l15 = l15 + 1) {
				fRec7.at (l15) = 0.0f;
			}
			IOTA0 = 0;
			for (int32 l16 = 0; l16 < 64; l16 = l16 + 1) {
				fVec7.at (l16) = 0.0f;
			}
			for (int32 l17 = 0; l17 < 3; l17 = l17 + 1) {
				fRec10.at (l17) = 0.0f;
			}
			for (int32 l18 = 0; l18 < 2; l18 = l18 + 1) {
				fRec9.at (l18) = 0.0f;
			}
			for (int32 l19 = 0; l19 < 2; l19 = l19 + 1) {
				iVec8.at (l19) = 0;
			}
			for (int32 l20 = 0; l20 < 4; l20 = l20 + 1) {
				fVec9.at (l20) = 0.0f;
			}
			for (int32 l21 = 0; l21 < 3; l21 = l21 + 1) {
				fRec12.at (l21) = 0.0f;
			}
			for (int32 l22 = 0; l22 < 2; l22 = l22 + 1) {
				fRec11.at (l22) = 0.0f;
			}
			for (int32 l23 = 0; l23 < 15; l23 = l23 + 1) {
				fVec10.at (l23) = 0.0f;
			}
			for (int32 l24 = 0; l24 < 3; l24 = l24 + 1) {
				fRec14.at (l24) = 0.0f;
			}
			for (int32 l25 = 0; l25 < 2; l25 = l25 + 1) {
				fRec13.at (l25) = 0.0f;
			}
			for (int32 l26 = 0; l26 < 6; l26 = l26 + 1) {
				fVec11.at (l26) = 0.0f;
			}
			for (int32 l27 = 0; l27 < 3; l27 = l27 + 1) {
				fRec16.at (l27) = 0.0f;
			}
			for (int32 l28 = 0; l28 < 2; l28 = l28 + 1) {
				fRec15.at (l28) = 0.0f;
			}
			for (int32 l29 = 0; l29 < 64; l29 = l29 + 1) {
				fVec12.at (l29) = 0.0f;
			}
			for (int32 l30 = 0; l30 < 3; l30 = l30 + 1) {
				fRec18.at (l30) = 0.0f;
			}
			for (int32 l31 = 0; l31 < 2; l31 = l31 + 1) {
				fRec17.at (l31) = 0.0f;
			}
			for (int32 l32 = 0; l32 < 2; l32 = l32 + 1) {
				iVec13.at (l32) = 0;
			}
			for (int32 l33 = 0; l33 < 2; l33 = l33 + 1) {
				iRec21.at (l33) = 0;
			}
			for (int32 l34 = 0; l34 < 2; l34 = l34 + 1) {
				iVec14.at (l34) = 0;
			}
			for (int32 l35 = 0; l35 < 5; l35 = l35 + 1) {
				fVec15.at (l35) = 0.0f;
			}
			for (int32 l36 = 0; l36 < 3; l36 = l36 + 1) {
				fRec20.at (l36) = 0.0f;
			}
			for (int32 l37 = 0; l37 < 2; l37 = l37 + 1) {
				fRec19.at (l37) = 0.0f;
			}
			for (int32 l38 = 0; l38 < 32; l38 = l38 + 1) {
				fVec16.at (l38) = 0.0f;
			}
			for (int32 l39 = 0; l39 < 3; l39 = l39 + 1) {
				fRec23.at (l39) = 0.0f;
			}
			for (int32 l40 = 0; l40 < 2; l40 = l40 + 1) {
				fRec22.at (l40) = 0.0f;
			}
			for (int32 l41 = 0; l41 < 8; l41 = l41 + 1) {
				fVec17.at (l41) = 0.0f;
			}
			for (int32 l42 = 0; l42 < 3; l42 = l42 + 1) {
				fRec25.at (l42) = 0.0f;
			}
			for (int32 l43 = 0; l43 < 2; l43 = l43 + 1) {
				fRec24.at (l43) = 0.0f;
			}
			for (int32 l44 = 0; l44 < 128; l44 = l44 + 1) {
				fVec18.at (l44) = 0.0f;
			}
			for (int32 l45 = 0; l45 < 3; l45 = l45 + 1) {
				fRec27.at (l45) = 0.0f;
			}
			for (int32 l46 = 0; l46 < 2; l46 = l46 + 1) {
				fRec26.at (l46) = 0.0f;
			}
			for (int32 l47 = 0; l47 < 2; l47 = l47 + 1) {
				iVec19.at (l47) = 0;
			}
			for (int32 l48 = 0; l48 < 6; l48 = l48 + 1) {
				fVec20.at (l48) = 0.0f;
			}
			for (int32 l49 = 0; l49 < 3; l49 = l49 + 1) {
				fRec29.at (l49) = 0.0f;
			}
			for (int32 l50 = 0; l50 < 2; l50 = l50 + 1) {
				fRec28.at (l50) = 0.0f;
			}
			for (int32 l51 = 0; l51 < 32; l51 = l51 + 1) {
				fVec21.at (l51) = 0.0f;
			}
			for (int32 l52 = 0; l52 < 3; l52 = l52 + 1) {
				fRec31.at (l52) = 0.0f;
			}
			for (int32 l53 = 0; l53 < 2; l53 = l53 + 1) {
				fRec30.at (l53) = 0.0f;
			}
			for (int32 l54 = 0; l54 < 10; l54 = l54 + 1) {
				fVec22.at (l54) = 0.0f;
			}
			for (int32 l55 = 0; l55 < 3; l55 = l55 + 1) {
				fRec33.at (l55) = 0.0f;
			}
			for (int32 l56 = 0; l56 < 2; l56 = l56 + 1) {
				fRec32.at (l56) = 0.0f;
			}
			for (int32 l57 = 0; l57 < 128; l57 = l57 + 1) {
				fVec23.at (l57) = 0.0f;
			}
			for (int32 l58 = 0; l58 < 3; l58 = l58 + 1) {
				fRec35.at (l58) = 0.0f;
			}
			for (int32 l59 = 0; l59 < 2; l59 = l59 + 1) {
				fRec34.at (l59) = 0.0f;
			}
			for (int32 l60 = 0; l60 < 2; l60 = l60 + 1) {
				iVec24.at (l60) = 0;
			}
			for (int32 l61 = 0; l61 < 8; l61 = l61 + 1) {
				fVec25.at (l61) = 0.0f;
			}
			for (int32 l62 = 0; l62 < 3; l62 = l62 + 1) {
				fRec37.at (l62) = 0.0f;
			}
			for (int32 l63 = 0; l63 < 2; l63 = l63 + 1) {
				fRec36.at (l63) = 0.0f;
			}
			for (int32 l64 = 0; l64 < 64; l64 = l64 + 1) {
				fVec26.at (l64) = 0.0f;
			}
			for (int32 l65 = 0; l65 < 3; l65 = l65 + 1) {
				fRec39.at (l65) = 0.0f;
			}
			for (int32 l66 = 0; l66 < 2; l66 = l66 + 1) {
				fRec38.at (l66) = 0.0f;
			}
			for (int32 l67 = 0; l67 < 13; l67 = l67 + 1) {
				fVec27.at (l67) = 0.0f;
			}
			for (int32 l68 = 0; l68 < 3; l68 = l68 + 1) {
				fRec41.at (l68) = 0.0f;
			}
			for (int32 l69 = 0; l69 < 2; l69 = l69 + 1) {
				fRec40.at (l69) = 0.0f;
			}
			for (int32 l70 = 0; l70 < 256; l70 = l70 + 1) {
				fVec28.at (l70) = 0.0f;
			}
			for (int32 l71 = 0; l71 < 3; l71 = l71 + 1) {
				fRec43.at (l71) = 0.0f;
			}
			for (int32 l72 = 0; l72 < 2; l72 = l72 + 1) {
				fRec42.at (l72) = 0.0f;
			}
			for (int32 l73 = 0; l73 < 2; l73 = l73 + 1) {
				iRec46.at (l73) = 0;
			}
			for (int32 l74 = 0; l74 < 2; l74 = l74 + 1) {
				iVec29.at (l74) = 0;
			}
			for (int32 l75 = 0; l75 < 2; l75 = l75 + 1) {
				iVec30.at (l75) = 0;
			}
			for (int32 l76 = 0; l76 < 2; l76 = l76 + 1) {
				iRec47.at (l76) = 0;
			}
			for (int32 l77 = 0; l77 < 2; l77 = l77 + 1) {
				iRec48.at (l77) = 0;
			}
			for (int32 l78 = 0; l78 < 2; l78 = l78 + 1) {
				iVec31.at (l78) = 0;
			}
			for (int32 l79 = 0; l79 < 10; l79 = l79 + 1) {
				fVec32.at (l79) = 0.0f;
			}
			for (int32 l80 = 0; l80 < 3; l80 = l80 + 1) {
				fRec45.at (l80) = 0.0f;
			}
			for (int32 l81 = 0; l81 < 2; l81 = l81 + 1) {
				fRec44.at (l81) = 0.0f;
			}
			for (int32 l82 = 0; l82 < 64; l82 = l82 + 1) {
				fVec33.at (l82) = 0.0f;
			}
			for (int32 l83 = 0; l83 < 3; l83 = l83 + 1) {
				fRec50.at (l83) = 0.0f;
			}
			for (int32 l84 = 0; l84 < 2; l84 = l84 + 1) {
				fRec49.at (l84) = 0.0f;
			}
			for (int32 l85 = 0; l85 < 32; l85 = l85 + 1) {
				fVec34.at (l85) = 0.0f;
			}
			for (int32 l86 = 0; l86 < 3; l86 = l86 + 1) {
				fRec52.at (l86) = 0.0f;
			}
			for (int32 l87 = 0; l87 < 2; l87 = l87 + 1) {
				fRec51.at (l87) = 0.0f;
			}
			for (int32 l88 = 0; l88 < 256; l88 = l88 + 1) {
				fVec35.at (l88) = 0.0f;
			}
			for (int32 l89 = 0; l89 < 3; l89 = l89 + 1) {
				fRec54.at (l89) = 0.0f;
			}
			for (int32 l90 = 0; l90 < 2; l90 = l90 + 1) {
				fRec53.at (l90) = 0.0f;
			}
			for (int32 l91 = 0; l91 < 2; l91 = l91 + 1) {
				iVec36.at (l91) = 0;
			}
			for (int32 l92 = 0; l92 < 13; l92 = l92 + 1) {
				fVec37.at (l92) = 0.0f;
			}
			for (int32 l93 = 0; l93 < 3; l93 = l93 + 1) {
				fRec56.at (l93) = 0.0f;
			}
			for (int32 l94 = 0; l94 < 2; l94 = l94 + 1) {
				fRec55.at (l94) = 0.0f;
			}
			for (int32 l95 = 0; l95 < 64; l95 = l95 + 1) {
				fVec38.at (l95) = 0.0f;
			}
			for (int32 l96 = 0; l96 < 3; l96 = l96 + 1) {
				fRec58.at (l96) = 0.0f;
			}
			for (int32 l97 = 0; l97 < 2; l97 = l97 + 1) {
				fRec57.at (l97) = 0.0f;
			}
			for (int32 l98 = 0; l98 < 32; l98 = l98 + 1) {
				fVec39.at (l98) = 0.0f;
			}
			for (int32 l99 = 0; l99 < 3; l99 = l99 + 1) {
				fRec60.at (l99) = 0.0f;
			}
			for (int32 l100 = 0; l100 < 2; l100 = l100 + 1) {
				fRec59.at (l100) = 0.0f;
			}
			for (int32 l101 = 0; l101 < 256; l101 = l101 + 1) {
				fVec40.at (l101) = 0.0f;
			}
			for (int32 l102 = 0; l102 < 3; l102 = l102 + 1) {
				fRec62.at (l102) = 0.0f;
			}
			for (int32 l103 = 0; l103 < 2; l103 = l103 + 1) {
				fRec61.at (l103) = 0.0f;
			}
			for (int32 l104 = 0; l104 < 2; l104 = l104 + 1) {
				iVec41.at (l104) = 0;
			}
			for (int32 l105 = 0; l105 < 2; l105 = l105 + 1) {
				iRec65.at (l105) = 0;
			}
			for (int32 l106 = 0; l106 < 2; l106 = l106 + 1) {
				iVec42.at (l106) = 0;
			}
			for (int32 l107 = 0; l107 < 32; l107 = l107 + 1) {
				fVec43.at (l107) = 0.0f;
			}
			for (int32 l108 = 0; l108 < 3; l108 = l108 + 1) {
				fRec64.at (l108) = 0.0f;
			}
			for (int32 l109 = 0; l109 < 2; l109 = l109 + 1) {
				fRec63.at (l109) = 0.0f;
			}
			for (int32 l110 = 0; l110 < 128; l110 = l110 + 1) {
				fVec44.at (l110) = 0.0f;
			}
			for (int32 l111 = 0; l111 < 3; l111 = l111 + 1) {
				fRec67.at (l111) = 0.0f;
			}
			for (int32 l112 = 0; l112 < 2; l112 = l112 + 1) {
				fRec66.at (l112) = 0.0f;
			}
			for (int32 l113 = 0; l113 < 32; l113 = l113 + 1) {
				fVec45.at (l113) = 0.0f;
			}
			for (int32 l114 = 0; l114 < 3; l114 = l114 + 1) {
				fRec69.at (l114) = 0.0f;
			}
			for (int32 l115 = 0; l115 < 2; l115 = l115 + 1) {
				fRec68.at (l115) = 0.0f;
			}
			for (int32 l116 = 0; l116 < 512; l116 = l116 + 1) {
				fVec46.at (l116) = 0.0f;
			}
			for (int32 l117 = 0; l117 < 3; l117 = l117 + 1) {
				fRec71.at (l117) = 0.0f;
			}
			for (int32 l118 = 0; l118 < 2; l118 = l118 + 1) {
				fRec70.at (l118) = 0.0f;
			}
			for (int32 l119 = 0; l119 < 2; l119 = l119 + 1) {
				iVec47.at (l119) = 0;
			}
			for (int32 l120 = 0; l120 < 32; l120 = l120 + 1) {
				fVec48.at (l120) = 0.0f;
			}
			for (int32 l121 = 0; l121 < 3; l121 = l121 + 1) {
				fRec73.at (l121) = 0.0f;
			}
			for (int32 l122 = 0; l122 < 2; l122 = l122 + 1) {
				fRec72.at (l122) = 0.0f;
			}
			for (int32 l123 = 0; l123 < 128; l123 = l123 + 1) {
				fVec49.at (l123) = 0.0f;
			}
			for (int32 l124 = 0; l124 < 3; l124 = l124 + 1) {
				fRec75.at (l124) = 0.0f;
			}
			for (int32 l125 = 0; l125 < 2; l125 = l125 + 1) {
				fRec74.at (l125) = 0.0f;
			}
			for (int32 l126 = 0; l126 < 64; l126 = l126 + 1) {
				fVec50.at (l126) = 0.0f;
			}
			for (int32 l127 = 0; l127 < 3; l127 = l127 + 1) {
				fRec77.at (l127) = 0.0f;
			}
			for (int32 l128 = 0; l128 < 2; l128 = l128 + 1) {
				fRec76.at (l128) = 0.0f;
			}
			for (int32 l129 = 0; l129 < 512; l129 = l129 + 1) {
				fVec51.at (l129) = 0.0f;
			}
			for (int32 l130 = 0; l130 < 3; l130 = l130 + 1) {
				fRec79.at (l130) = 0.0f;
			}
			for (int32 l131 = 0; l131 < 2; l131 = l131 + 1) {
				fRec78.at (l131) = 0.0f;
			}
			for (int32 l132 = 0; l132 < 2; l132 = l132 + 1) {
				iVec52.at (l132) = 0;
			}
			for (int32 l133 = 0; l133 < 32; l133 = l133 + 1) {
				fVec53.at (l133) = 0.0f;
			}
			for (int32 l134 = 0; l134 < 3; l134 = l134 + 1) {
				fRec81.at (l134) = 0.0f;
			}
			for (int32 l135 = 0; l135 < 2; l135 = l135 + 1) {
				fRec80.at (l135) = 0.0f;
			}
			for (int32 l136 = 0; l136 < 256; l136 = l136 + 1) {
				fVec54.at (l136) = 0.0f;
			}
			for (int32 l137 = 0; l137 < 3; l137 = l137 + 1) {
				fRec83.at (l137) = 0.0f;
			}
			for (int32 l138 = 0; l138 < 2; l138 = l138 + 1) {
				fRec82.at (l138) = 0.0f;
			}
			for (int32 l139 = 0; l139 < 64; l139 = l139 + 1) {
				fVec55.at (l139) = 0.0f;
			}
			for (int32 l140 = 0; l140 < 3; l140 = l140 + 1) {
				fRec85.at (l140) = 0.0f;
			}
			for (int32 l141 = 0; l141 < 2; l141 = l141 + 1) {
				fRec84.at (l141) = 0.0f;
			}
			for (int32 l142 = 0; l142 < 1024; l142 = l142 + 1) {
				fVec56.at (l142) = 0.0f;
			}
			for (int32 l143 = 0; l143 < 3; l143 = l143 + 1) {
				fRec87.at (l143) = 0.0f;
			}
			for (int32 l144 = 0; l144 < 2; l144 = l144 + 1) {
				fRec86.at (l144) = 0.0f;
			}
			for (int32 l145 = 0; l145 < 2; l145 = l145 + 1) {
				iRec90.at (l145) = 0;
			}
			for (int32 l146 = 0; l146 < 2; l146 = l146 + 1) {
				iVec57.at (l146) = 0;
			}
			for (int32 l147 = 0; l147 < 2; l147 = l147 + 1) {
				iVec58.at (l147) = 0;
			}
			for (int32 l148 = 0; l148 < 2; l148 = l148 + 1) {
				iRec91.at (l148) = 0;
			}
			for (int32 l149 = 0; l149 < 2; l149 = l149 + 1) {
				iRec92.at (l149) = 0;
			}
			for (int32 l150 = 0; l150 < 2; l150 = l150 + 1) {
				iVec59.at (l150) = 0;
			}
			for (int32 l151 = 0; l151 < 64; l151 = l151 + 1) {
				fVec60.at (l151) = 0.0f;
			}
			for (int32 l152 = 0; l152 < 3; l152 = l152 + 1) {
				fRec89.at (l152) = 0.0f;
			}
			for (int32 l153 = 0; l153 < 2; l153 = l153 + 1) {
				fRec88.at (l153) = 0.0f;
			}
			for (int32 l154 = 0; l154 < 256; l154 = l154 + 1) {
				fVec61.at (l154) = 0.0f;
			}
			for (int32 l155 = 0; l155 < 3; l155 = l155 + 1) {
				fRec94.at (l155) = 0.0f;
			}
			for (int32 l156 = 0; l156 < 2; l156 = l156 + 1) {
				fRec93.at (l156) = 0.0f;
			}
			for (int32 l157 = 0; l157 < 128; l157 = l157 + 1) {
				fVec62.at (l157) = 0.0f;
			}
			for (int32 l158 = 0; l158 < 3; l158 = l158 + 1) {
				fRec96.at (l158) = 0.0f;
			}
			for (int32 l159 = 0; l159 < 2; l159 = l159 + 1) {
				fRec95.at (l159) = 0.0f;
			}
			for (int32 l160 = 0; l160 < 1024; l160 = l160 + 1) {
				fVec63.at (l160) = 0.0f;
			}
			for (int32 l161 = 0; l161 < 3; l161 = l161 + 1) {
				fRec98.at (l161) = 0.0f;
			}
			for (int32 l162 = 0; l162 < 2; l162 = l162 + 1) {
				fRec97.at (l162) = 0.0f;
			}
			for (int32 l163 = 0; l163 < 2; l163 = l163 + 1) {
				iVec64.at (l163) = 0;
			}
			for (int32 l164 = 0; l164 < 64; l164 = l164 + 1) {
				fVec65.at (l164) = 0.0f;
			}
			for (int32 l165 = 0; l165 < 3; l165 = l165 + 1) {
				fRec100.at (l165) = 0.0f;
			}
			for (int32 l166 = 0; l166 < 2; l166 = l166 + 1) {
				fRec99.at (l166) = 0.0f;
			}
			for (int32 l167 = 0; l167 < 256; l167 = l167 + 1) {
				fVec66.at (l167) = 0.0f;
			}
			for (int32 l168 = 0; l168 < 3; l168 = l168 + 1) {
				fRec102.at (l168) = 0.0f;
			}
			for (int32 l169 = 0; l169 < 2; l169 = l169 + 1) {
				fRec101.at (l169) = 0.0f;
			}
			for (int32 l170 = 0; l170 < 128; l170 = l170 + 1) {
				fVec67.at (l170) = 0.0f;
			}
			for (int32 l171 = 0; l171 < 3; l171 = l171 + 1) {
				fRec104.at (l171) = 0.0f;
			}
			for (int32 l172 = 0; l172 < 2; l172 = l172 + 1) {
				fRec103.at (l172) = 0.0f;
			}
			for (int32 l173 = 0; l173 < 1024; l173 = l173 + 1) {
				fVec68.at (l173) = 0.0f;
			}
			for (int32 l174 = 0; l174 < 3; l174 = l174 + 1) {
				fRec106.at (l174) = 0.0f;
			}
			for (int32 l175 = 0; l175 < 2; l175 = l175 + 1) {
				fRec105.at (l175) = 0.0f;
			}
			for (int32 l176 = 0; l176 < 2; l176 = l176 + 1) {
				iVec69.at (l176) = 0;
			}
			for (int32 l177 = 0; l177 < 2; l177 = l177 + 1) {
				iRec109.at (l177) = 0;
			}
			for (int32 l178 = 0; l178 < 2; l178 = l178 + 1) {
				iVec70.at (l178) = 0;
			}
			for (int32 l179 = 0; l179 < 128; l179 = l179 + 1) {
				fVec71.at (l179) = 0.0f;
			}
			for (int32 l180 = 0; l180 < 3; l180 = l180 + 1) {
				fRec108.at (l180) = 0.0f;
			}
			for (int32 l181 = 0; l181 < 2; l181 = l181 + 1) {
				fRec107.at (l181) = 0.0f;
			}
			for (int32 l182 = 0; l182 < 512; l182 = l182 + 1) {
				fVec72.at (l182) = 0.0f;
			}
			for (int32 l183 = 0; l183 < 3; l183 = l183 + 1) {
				fRec111.at (l183) = 0.0f;
			}
			for (int32 l184 = 0; l184 < 2; l184 = l184 + 1) {
				fRec110.at (l184) = 0.0f;
			}
			for (int32 l185 = 0; l185 < 128; l185 = l185 + 1) {
				fVec73.at (l185) = 0.0f;
			}
			for (int32 l186 = 0; l186 < 3; l186 = l186 + 1) {
				fRec113.at (l186) = 0.0f;
			}
			for (int32 l187 = 0; l187 < 2; l187 = l187 + 1) {
				fRec112.at (l187) = 0.0f;
			}
			for (int32 l188 = 0; l188 < 2048; l188 = l188 + 1) {
				fVec74.at (l188) = 0.0f;
			}
			for (int32 l189 = 0; l189 < 3; l189 = l189 + 1) {
				fRec115.at (l189) = 0.0f;
			}
			for (int32 l190 = 0; l190 < 2; l190 = l190 + 1) {
				fRec114.at (l190) = 0.0f;
			}
			for (int32 l191 = 0; l191 < 2; l191 = l191 + 1) {
				iVec75.at (l191) = 0;
			}
			for (int32 l192 = 0; l192 < 128; l192 = l192 + 1) {
				fVec76.at (l192) = 0.0f;
			}
			for (int32 l193 = 0; l193 < 3; l193 = l193 + 1) {
				fRec117.at (l193) = 0.0f;
			}
			for (int32 l194 = 0; l194 < 2; l194 = l194 + 1) {
				fRec116.at (l194) = 0.0f;
			}
			for (int32 l195 = 0; l195 < 512; l195 = l195 + 1) {
				fVec77.at (l195) = 0.0f;
			}
			for (int32 l196 = 0; l196 < 3; l196 = l196 + 1) {
				fRec119.at (l196) = 0.0f;
			}
			for (int32 l197 = 0; l197 < 2; l197 = l197 + 1) {
				fRec118.at (l197) = 0.0f;
			}
			for (int32 l198 = 0; l198 < 256; l198 = l198 + 1) {
				fVec78.at (l198) = 0.0f;
			}
			for (int32 l199 = 0; l199 < 3; l199 = l199 + 1) {
				fRec121.at (l199) = 0.0f;
			}
			for (int32 l200 = 0; l200 < 2; l200 = l200 + 1) {
				fRec120.at (l200) = 0.0f;
			}
			for (int32 l201 = 0; l201 < 2048; l201 = l201 + 1) {
				fVec79.at (l201) = 0.0f;
			}
			for (int32 l202 = 0; l202 < 3; l202 = l202 + 1) {
				fRec123.at (l202) = 0.0f;
			}
			for (int32 l203 = 0; l203 < 2; l203 = l203 + 1) {
				fRec122.at (l203) = 0.0f;
			}
			for (int32 l204 = 0; l204 < 2; l204 = l204 + 1) {
				iVec80.at (l204) = 0;
			}
			for (int32 l205 = 0; l205 < 128; l205 = l205 + 1) {
				fVec81.at (l205) = 0.0f;
			}
			for (int32 l206 = 0; l206 < 3; l206 = l206 + 1) {
				fRec125.at (l206) = 0.0f;
			}
			for (int32 l207 = 0; l207 < 2; l207 = l207 + 1) {
				fRec124.at (l207) = 0.0f;
			}
			for (int32 l208 = 0; l208 < 4096; l208 = l208 + 1) {
				fVec82.at (l208) = 0.0f;
			}
			for (int32 l209 = 0; l209 < 3; l209 = l209 + 1) {
				fRec127.at (l209) = 0.0f;
			}
			for (int32 l210 = 0; l210 < 2; l210 = l210 + 1) {
				fRec126.at (l210) = 0.0f;
			}
			for (int32 l211 = 0; l211 < 256; l211 = l211 + 1) {
				fVec83.at (l211) = 0.0f;
			}
			for (int32 l212 = 0; l212 < 3; l212 = l212 + 1) {
				fRec129.at (l212) = 0.0f;
			}
			for (int32 l213 = 0; l213 < 2; l213 = l213 + 1) {
				fRec128.at (l213) = 0.0f;
			}
			for (int32 l214 = 0; l214 < 1024; l214 = l214 + 1) {
				fVec84.at (l214) = 0.0f;
			}
			for (int32 l215 = 0; l215 < 3; l215 = l215 + 1) {
				fRec131.at (l215) = 0.0f;
			}
			for (int32 l216 = 0; l216 < 2; l216 = l216 + 1) {
				fRec130.at (l216) = 0.0f;
			}
			for (int32 l217 = 0; l217 < 2; l217 = l217 + 1) {
				iVec85.at (l217) = 0;
			}
			for (int32 l218 = 0; l218 < 3; l218 = l218 + 1) {
				fVec86.at (l218) = 0.0f;
			}
			for (int32 l219 = 0; l219 < 3; l219 = l219 + 1) {
				fRec133.at (l219) = 0.0f;
			}
			for (int32 l220 = 0; l220 < 2; l220 = l220 + 1) {
				fRec132.at (l220) = 0.0f;
			}
			for (int32 l221 = 0; l221 < 10; l221 = l221 + 1) {
				fVec87.at (l221) = 0.0f;
			}
			for (int32 l222 = 0; l222 < 3; l222 = l222 + 1) {
				fRec135.at (l222) = 0.0f;
			}
			for (int32 l223 = 0; l223 < 2; l223 = l223 + 1) {
				fRec134.at (l223) = 0.0f;
			}
			for (int32 l224 = 0; l224 < 4; l224 = l224 + 1) {
				fVec88.at (l224) = 0.0f;
			}
			for (int32 l225 = 0; l225 < 3; l225 = l225 + 1) {
				fRec137.at (l225) = 0.0f;
			}
			for (int32 l226 = 0; l226 < 2; l226 = l226 + 1) {
				fRec136.at (l226) = 0.0f;
			}
			for (int32 l227 = 0; l227 < 64; l227 = l227 + 1) {
				fVec89.at (l227) = 0.0f;
			}
			for (int32 l228 = 0; l228 < 3; l228 = l228 + 1) {
				fRec139.at (l228) = 0.0f;
			}
			for (int32 l229 = 0; l229 < 2; l229 = l229 + 1) {
				fRec138.at (l229) = 0.0f;
			}
			for (int32 l230 = 0; l230 < 2; l230 = l230 + 1) {
				iVec90.at (l230) = 0;
			}
			for (int32 l231 = 0; l231 < 3; l231 = l231 + 1) {
				fVec91.at (l231) = 0.0f;
			}
			for (int32 l232 = 0; l232 < 3; l232 = l232 + 1) {
				fRec141.at (l232) = 0.0f;
			}
			for (int32 l233 = 0; l233 < 2; l233 = l233 + 1) {
				fRec140.at (l233) = 0.0f;
			}
			for (int32 l234 = 0; l234 < 13; l234 = l234 + 1) {
				fVec92.at (l234) = 0.0f;
			}
			for (int32 l235 = 0; l235 < 3; l235 = l235 + 1) {
				fRec143.at (l235) = 0.0f;
			}
			for (int32 l236 = 0; l236 < 2; l236 = l236 + 1) {
				fRec142.at (l236) = 0.0f;
			}
			for (int32 l237 = 0; l237 < 5; l237 = l237 + 1) {
				fVec93.at (l237) = 0.0f;
			}
			for (int32 l238 = 0; l238 < 3; l238 = l238 + 1) {
				fRec145.at (l238) = 0.0f;
			}
			for (int32 l239 = 0; l239 < 2; l239 = l239 + 1) {
				fRec144.at (l239) = 0.0f;
			}
			for (int32 l240 = 0; l240 < 64; l240 = l240 + 1) {
				fVec94.at (l240) = 0.0f;
			}
			for (int32 l241 = 0; l241 < 3; l241 = l241 + 1) {
				fRec147.at (l241) = 0.0f;
			}
			for (int32 l242 = 0; l242 < 2; l242 = l242 + 1) {
				fRec146.at (l242) = 0.0f;
			}
			for (int32 l243 = 0; l243 < 2; l243 = l243 + 1) {
				iVec95.at (l243) = 0;
			}
			for (int32 l244 = 0; l244 < 4; l244 = l244 + 1) {
				fVec96.at (l244) = 0.0f;
			}
			for (int32 l245 = 0; l245 < 3; l245 = l245 + 1) {
				fRec149.at (l245) = 0.0f;
			}
			for (int32 l246 = 0; l246 < 2; l246 = l246 + 1) {
				fRec148.at (l246) = 0.0f;
			}
			for (int32 l247 = 0; l247 < 32; l247 = l247 + 1) {
				fVec97.at (l247) = 0.0f;
			}
			for (int32 l248 = 0; l248 < 3; l248 = l248 + 1) {
				fRec151.at (l248) = 0.0f;
			}
			for (int32 l249 = 0; l249 < 2; l249 = l249 + 1) {
				fRec150.at (l249) = 0.0f;
			}
			for (int32 l250 = 0; l250 < 7; l250 = l250 + 1) {
				fVec98.at (l250) = 0.0f;
			}
			for (int32 l251 = 0; l251 < 3; l251 = l251 + 1) {
				fRec153.at (l251) = 0.0f;
			}
			for (int32 l252 = 0; l252 < 2; l252 = l252 + 1) {
				fRec152.at (l252) = 0.0f;
			}
			for (int32 l253 = 0; l253 < 128; l253 = l253 + 1) {
				fVec99.at (l253) = 0.0f;
			}
			for (int32 l254 = 0; l254 < 3; l254 = l254 + 1) {
				fRec155.at (l254) = 0.0f;
			}
			for (int32 l255 = 0; l255 < 2; l255 = l255 + 1) {
				fRec154.at (l255) = 0.0f;
			}
			for (int32 l256 = 0; l256 < 2; l256 = l256 + 1) {
				iVec100.at (l256) = 0;
			}
			for (int32 l257 = 0; l257 < 5; l257 = l257 + 1) {
				fVec101.at (l257) = 0.0f;
			}
			for (int32 l258 = 0; l258 < 3; l258 = l258 + 1) {
				fRec157.at (l258) = 0.0f;
			}
			for (int32 l259 = 0; l259 < 2; l259 = l259 + 1) {
				fRec156.at (l259) = 0.0f;
			}
			for (int32 l260 = 0; l260 < 32; l260 = l260 + 1) {
				fVec102.at (l260) = 0.0f;
			}
			for (int32 l261 = 0; l261 < 3; l261 = l261 + 1) {
				fRec159.at (l261) = 0.0f;
			}
			for (int32 l262 = 0; l262 < 2; l262 = l262 + 1) {
				fRec158.at (l262) = 0.0f;
			}
			for (int32 l263 = 0; l263 < 9; l263 = l263 + 1) {
				fVec103.at (l263) = 0.0f;
			}
			for (int32 l264 = 0; l264 < 3; l264 = l264 + 1) {
				fRec161.at (l264) = 0.0f;
			}
			for (int32 l265 = 0; l265 < 2; l265 = l265 + 1) {
				fRec160.at (l265) = 0.0f;
			}
			for (int32 l266 = 0; l266 < 128; l266 = l266 + 1) {
				fVec104.at (l266) = 0.0f;
			}
			for (int32 l267 = 0; l267 < 3; l267 = l267 + 1) {
				fRec163.at (l267) = 0.0f;
			}
			for (int32 l268 = 0; l268 < 2; l268 = l268 + 1) {
				fRec162.at (l268) = 0.0f;
			}
			for (int32 l269 = 0; l269 < 2; l269 = l269 + 1) {
				iVec105.at (l269) = 0;
			}
			for (int32 l270 = 0; l270 < 7; l270 = l270 + 1) {
				fVec106.at (l270) = 0.0f;
			}
			for (int32 l271 = 0; l271 < 3; l271 = l271 + 1) {
				fRec165.at (l271) = 0.0f;
			}
			for (int32 l272 = 0; l272 < 2; l272 = l272 + 1) {
				fRec164.at (l272) = 0.0f;
			}
			for (int32 l273 = 0; l273 < 32; l273 = l273 + 1) {
				fVec107.at (l273) = 0.0f;
			}
			for (int32 l274 = 0; l274 < 3; l274 = l274 + 1) {
				fRec167.at (l274) = 0.0f;
			}
			for (int32 l275 = 0; l275 < 2; l275 = l275 + 1) {
				fRec166.at (l275) = 0.0f;
			}
			for (int32 l276 = 0; l276 < 11; l276 = l276 + 1) {
				fVec108.at (l276) = 0.0f;
			}
			for (int32 l277 = 0; l277 < 3; l277 = l277 + 1) {
				fRec169.at (l277) = 0.0f;
			}
			for (int32 l278 = 0; l278 < 2; l278 = l278 + 1) {
				fRec168.at (l278) = 0.0f;
			}
			for (int32 l279 = 0; l279 < 128; l279 = l279 + 1) {
				fVec109.at (l279) = 0.0f;
			}
			for (int32 l280 = 0; l280 < 3; l280 = l280 + 1) {
				fRec171.at (l280) = 0.0f;
			}
			for (int32 l281 = 0; l281 < 2; l281 = l281 + 1) {
				fRec170.at (l281) = 0.0f;
			}
			for (int32 l282 = 0; l282 < 2; l282 = l282 + 1) {
				iVec110.at (l282) = 0;
			}
			for (int32 l283 = 0; l283 < 9; l283 = l283 + 1) {
				fVec111.at (l283) = 0.0f;
			}
			for (int32 l284 = 0; l284 < 3; l284 = l284 + 1) {
				fRec173.at (l284) = 0.0f;
			}
			for (int32 l285 = 0; l285 < 2; l285 = l285 + 1) {
				fRec172.at (l285) = 0.0f;
			}
			for (int32 l286 = 0; l286 < 64; l286 = l286 + 1) {
				fVec112.at (l286) = 0.0f;
			}
			for (int32 l287 = 0; l287 < 3; l287 = l287 + 1) {
				fRec175.at (l287) = 0.0f;
			}
			for (int32 l288 = 0; l288 < 2; l288 = l288 + 1) {
				fRec174.at (l288) = 0.0f;
			}
			for (int32 l289 = 0; l289 < 15; l289 = l289 + 1) {
				fVec113.at (l289) = 0.0f;
			}
			for (int32 l290 = 0; l290 < 3; l290 = l290 + 1) {
				fRec177.at (l290) = 0.0f;
			}
			for (int32 l291 = 0; l291 < 2; l291 = l291 + 1) {
				fRec176.at (l291) = 0.0f;
			}
			for (int32 l292 = 0; l292 < 256; l292 = l292 + 1) {
				fVec114.at (l292) = 0.0f;
			}
			for (int32 l293 = 0; l293 < 3; l293 = l293 + 1) {
				fRec179.at (l293) = 0.0f;
			}
			for (int32 l294 = 0; l294 < 2; l294 = l294 + 1) {
				fRec178.at (l294) = 0.0f;
			}
			for (int32 l295 = 0; l295 < 2; l295 = l295 + 1) {
				iVec115.at (l295) = 0;
			}
			for (int32 l296 = 0; l296 < 12; l296 = l296 + 1) {
				fVec116.at (l296) = 0.0f;
			}
			for (int32 l297 = 0; l297 < 3; l297 = l297 + 1) {
				fRec181.at (l297) = 0.0f;
			}
			for (int32 l298 = 0; l298 < 2; l298 = l298 + 1) {
				fRec180.at (l298) = 0.0f;
			}
			for (int32 l299 = 0; l299 < 64; l299 = l299 + 1) {
				fVec117.at (l299) = 0.0f;
			}
			for (int32 l300 = 0; l300 < 3; l300 = l300 + 1) {
				fRec183.at (l300) = 0.0f;
			}
			for (int32 l301 = 0; l301 < 2; l301 = l301 + 1) {
				fRec182.at (l301) = 0.0f;
			}
			for (int32 l302 = 0; l302 < 32; l302 = l302 + 1) {
				fVec118.at (l302) = 0.0f;
			}
			for (int32 l303 = 0; l303 < 3; l303 = l303 + 1) {
				fRec185.at (l303) = 0.0f;
			}
			for (int32 l304 = 0; l304 < 2; l304 = l304 + 1) {
				fRec184.at (l304) = 0.0f;
			}
			for (int32 l305 = 0; l305 < 256; l305 = l305 + 1) {
				fVec119.at (l305) = 0.0f;
			}
			for (int32 l306 = 0; l306 < 3; l306 = l306 + 1) {
				fRec187.at (l306) = 0.0f;
			}
			for (int32 l307 = 0; l307 < 2; l307 = l307 + 1) {
				fRec186.at (l307) = 0.0f;
			}
			for (int32 l308 = 0; l308 < 2; l308 = l308 + 1) {
				iVec120.at (l308) = 0;
			}
			for (int32 l309 = 0; l309 < 15; l309 = l309 + 1) {
				fVec121.at (l309) = 0.0f;
			}
			for (int32 l310 = 0; l310 < 3; l310 = l310 + 1) {
				fRec189.at (l310) = 0.0f;
			}
			for (int32 l311 = 0; l311 < 2; l311 = l311 + 1) {
				fRec188.at (l311) = 0.0f;
			}
			for (int32 l312 = 0; l312 < 128; l312 = l312 + 1) {
				fVec122.at (l312) = 0.0f;
			}
			for (int32 l313 = 0; l313 < 3; l313 = l313 + 1) {
				fRec191.at (l313) = 0.0f;
			}
			for (int32 l314 = 0; l314 < 2; l314 = l314 + 1) {
				fRec190.at (l314) = 0.0f;
			}
			for (int32 l315 = 0; l315 < 32; l315 = l315 + 1) {
				fVec123.at (l315) = 0.0f;
			}
			for (int32 l316 = 0; l316 < 3; l316 = l316 + 1) {
				fRec193.at (l316) = 0.0f;
			}
			for (int32 l317 = 0; l317 < 2; l317 = l317 + 1) {
				fRec192.at (l317) = 0.0f;
			}
			for (int32 l318 = 0; l318 < 512; l318 = l318 + 1) {
				fVec124.at (l318) = 0.0f;
			}
			for (int32 l319 = 0; l319 < 3; l319 = l319 + 1) {
				fRec195.at (l319) = 0.0f;
			}
			for (int32 l320 = 0; l320 < 2; l320 = l320 + 1) {
				fRec194.at (l320) = 0.0f;
			}
			for (int32 l321 = 0; l321 < 2; l321 = l321 + 1) {
				iVec125.at (l321) = 0;
			}
			for (int32 l322 = 0; l322 < 32; l322 = l322 + 1) {
				fVec126.at (l322) = 0.0f;
			}
			for (int32 l323 = 0; l323 < 3; l323 = l323 + 1) {
				fRec197.at (l323) = 0.0f;
			}
			for (int32 l324 = 0; l324 < 2; l324 = l324 + 1) {
				fRec196.at (l324) = 0.0f;
			}
			for (int32 l325 = 0; l325 < 128; l325 = l325 + 1) {
				fVec127.at (l325) = 0.0f;
			}
			for (int32 l326 = 0; l326 < 3; l326 = l326 + 1) {
				fRec199.at (l326) = 0.0f;
			}
			for (int32 l327 = 0; l327 < 2; l327 = l327 + 1) {
				fRec198.at (l327) = 0.0f;
			}
			for (int32 l328 = 0; l328 < 64; l328 = l328 + 1) {
				fVec128.at (l328) = 0.0f;
			}
			for (int32 l329 = 0; l329 < 3; l329 = l329 + 1) {
				fRec201.at (l329) = 0.0f;
			}
			for (int32 l330 = 0; l330 < 2; l330 = l330 + 1) {
				fRec200.at (l330) = 0.0f;
			}
			for (int32 l331 = 0; l331 < 512; l331 = l331 + 1) {
				fVec129.at (l331) = 0.0f;
			}
			for (int32 l332 = 0; l332 < 3; l332 = l332 + 1) {
				fRec203.at (l332) = 0.0f;
			}
			for (int32 l333 = 0; l333 < 2; l333 = l333 + 1) {
				fRec202.at (l333) = 0.0f;
			}
			for (int32 l334 = 0; l334 < 2; l334 = l334 + 1) {
				iVec130.at (l334) = 0;
			}
			for (int32 l335 = 0; l335 < 32; l335 = l335 + 1) {
				fVec131.at (l335) = 0.0f;
			}
			for (int32 l336 = 0; l336 < 3; l336 = l336 + 1) {
				fRec205.at (l336) = 0.0f;
			}
			for (int32 l337 = 0; l337 < 2; l337 = l337 + 1) {
				fRec204.at (l337) = 0.0f;
			}
			for (int32 l338 = 0; l338 < 128; l338 = l338 + 1) {
				fVec132.at (l338) = 0.0f;
			}
			for (int32 l339 = 0; l339 < 3; l339 = l339 + 1) {
				fRec207.at (l339) = 0.0f;
			}
			for (int32 l340 = 0; l340 < 2; l340 = l340 + 1) {
				fRec206.at (l340) = 0.0f;
			}
			for (int32 l341 = 0; l341 < 64; l341 = l341 + 1) {
				fVec133.at (l341) = 0.0f;
			}
			for (int32 l342 = 0; l342 < 3; l342 = l342 + 1) {
				fRec209.at (l342) = 0.0f;
			}
			for (int32 l343 = 0; l343 < 2; l343 = l343 + 1) {
				fRec208.at (l343) = 0.0f;
			}
			for (int32 l344 = 0; l344 < 512; l344 = l344 + 1) {
				fVec134.at (l344) = 0.0f;
			}
			for (int32 l345 = 0; l345 < 3; l345 = l345 + 1) {
				fRec211.at (l345) = 0.0f;
			}
			for (int32 l346 = 0; l346 < 2; l346 = l346 + 1) {
				fRec210.at (l346) = 0.0f;
			}
			for (int32 l347 = 0; l347 < 2; l347 = l347 + 1) {
				iVec135.at (l347) = 0;
			}
			for (int32 l348 = 0; l348 < 64; l348 = l348 + 1) {
				fVec136.at (l348) = 0.0f;
			}
			for (int32 l349 = 0; l349 < 3; l349 = l349 + 1) {
				fRec213.at (l349) = 0.0f;
			}
			for (int32 l350 = 0; l350 < 2; l350 = l350 + 1) {
				fRec212.at (l350) = 0.0f;
			}
			for (int32 l351 = 0; l351 < 256; l351 = l351 + 1) {
				fVec137.at (l351) = 0.0f;
			}
			for (int32 l352 = 0; l352 < 3; l352 = l352 + 1) {
				fRec215.at (l352) = 0.0f;
			}
			for (int32 l353 = 0; l353 < 2; l353 = l353 + 1) {
				fRec214.at (l353) = 0.0f;
			}
			for (int32 l354 = 0; l354 < 64; l354 = l354 + 1) {
				fVec138.at (l354) = 0.0f;
			}
			for (int32 l355 = 0; l355 < 3; l355 = l355 + 1) {
				fRec217.at (l355) = 0.0f;
			}
			for (int32 l356 = 0; l356 < 2; l356 = l356 + 1) {
				fRec216.at (l356) = 0.0f;
			}
			for (int32 l357 = 0; l357 < 1024; l357 = l357 + 1) {
				fVec139.at (l357) = 0.0f;
			}
			for (int32 l358 = 0; l358 < 3; l358 = l358 + 1) {
				fRec219.at (l358) = 0.0f;
			}
			for (int32 l359 = 0; l359 < 2; l359 = l359 + 1) {
				fRec218.at (l359) = 0.0f;
			}
			for (int32 l360 = 0; l360 < 2; l360 = l360 + 1) {
				iVec140.at (l360) = 0;
			}
			for (int32 l361 = 0; l361 < 64; l361 = l361 + 1) {
				fVec141.at (l361) = 0.0f;
			}
			for (int32 l362 = 0; l362 < 3; l362 = l362 + 1) {
				fRec221.at (l362) = 0.0f;
			}
			for (int32 l363 = 0; l363 < 2; l363 = l363 + 1) {
				fRec220.at (l363) = 0.0f;
			}
			for (int32 l364 = 0; l364 < 256; l364 = l364 + 1) {
				fVec142.at (l364) = 0.0f;
			}
			for (int32 l365 = 0; l365 < 3; l365 = l365 + 1) {
				fRec223.at (l365) = 0.0f;
			}
			for (int32 l366 = 0; l366 < 2; l366 = l366 + 1) {
				fRec222.at (l366) = 0.0f;
			}
			for (int32 l367 = 0; l367 < 128; l367 = l367 + 1) {
				fVec143.at (l367) = 0.0f;
			}
			for (int32 l368 = 0; l368 < 3; l368 = l368 + 1) {
				fRec225.at (l368) = 0.0f;
			}
			for (int32 l369 = 0; l369 < 2; l369 = l369 + 1) {
				fRec224.at (l369) = 0.0f;
			}
			for (int32 l370 = 0; l370 < 1024; l370 = l370 + 1) {
				fVec144.at (l370) = 0.0f;
			}
			for (int32 l371 = 0; l371 < 3; l371 = l371 + 1) {
				fRec227.at (l371) = 0.0f;
			}
			for (int32 l372 = 0; l372 < 2; l372 = l372 + 1) {
				fRec226.at (l372) = 0.0f;
			}
			for (int32 l373 = 0; l373 < 2; l373 = l373 + 1) {
				iVec145.at (l373) = 0;
			}
			for (int32 l374 = 0; l374 < 64; l374 = l374 + 1) {
				fVec146.at (l374) = 0.0f;
			}
			for (int32 l375 = 0; l375 < 3; l375 = l375 + 1) {
				fRec229.at (l375) = 0.0f;
			}
			for (int32 l376 = 0; l376 < 2; l376 = l376 + 1) {
				fRec228.at (l376) = 0.0f;
			}
			for (int32 l377 = 0; l377 < 512; l377 = l377 + 1) {
				fVec147.at (l377) = 0.0f;
			}
			for (int32 l378 = 0; l378 < 3; l378 = l378 + 1) {
				fRec231.at (l378) = 0.0f;
			}
			for (int32 l379 = 0; l379 < 2; l379 = l379 + 1) {
				fRec230.at (l379) = 0.0f;
			}
			for (int32 l380 = 0; l380 < 128; l380 = l380 + 1) {
				fVec148.at (l380) = 0.0f;
			}
			for (int32 l381 = 0; l381 < 3; l381 = l381 + 1) {
				fRec233.at (l381) = 0.0f;
			}
			for (int32 l382 = 0; l382 < 2; l382 = l382 + 1) {
				fRec232.at (l382) = 0.0f;
			}
			for (int32 l383 = 0; l383 < 2048; l383 = l383 + 1) {
				fVec149.at (l383) = 0.0f;
			}
			for (int32 l384 = 0; l384 < 3; l384 = l384 + 1) {
				fRec235.at (l384) = 0.0f;
			}
			for (int32 l385 = 0; l385 < 2; l385 = l385 + 1) {
				fRec234.at (l385) = 0.0f;
			}
			for (int32 l386 = 0; l386 < 2; l386 = l386 + 1) {
				iVec150.at (l386) = 0;
			}
			for (int32 l387 = 0; l387 < 128; l387 = l387 + 1) {
				fVec151.at (l387) = 0.0f;
			}
			for (int32 l388 = 0; l388 < 3; l388 = l388 + 1) {
				fRec237.at (l388) = 0.0f;
			}
			for (int32 l389 = 0; l389 < 2; l389 = l389 + 1) {
				fRec236.at (l389) = 0.0f;
			}
			for (int32 l390 = 0; l390 < 512; l390 = l390 + 1) {
				fVec152.at (l390) = 0.0f;
			}
			for (int32 l391 = 0; l391 < 3; l391 = l391 + 1) {
				fRec239.at (l391) = 0.0f;
			}
			for (int32 l392 = 0; l392 < 2; l392 = l392 + 1) {
				fRec238.at (l392) = 0.0f;
			}
			for (int32 l393 = 0; l393 < 256; l393 = l393 + 1) {
				fVec153.at (l393) = 0.0f;
			}
			for (int32 l394 = 0; l394 < 3; l394 = l394 + 1) {
				fRec241.at (l394) = 0.0f;
			}
			for (int32 l395 = 0; l395 < 2; l395 = l395 + 1) {
				fRec240.at (l395) = 0.0f;
			}
			for (int32 l396 = 0; l396 < 2048; l396 = l396 + 1) {
				fVec154.at (l396) = 0.0f;
			}
			for (int32 l397 = 0; l397 < 3; l397 = l397 + 1) {
				fRec243.at (l397) = 0.0f;
			}
			for (int32 l398 = 0; l398 < 2; l398 = l398 + 1) {
				fRec242.at (l398) = 0.0f;
			}
			for (int32 l399 = 0; l399 < 2; l399 = l399 + 1) {
				iVec155.at (l399) = 0;
			}
			for (int32 l400 = 0; l400 < 128; l400 = l400 + 1) {
				fVec156.at (l400) = 0.0f;
			}
			for (int32 l401 = 0; l401 < 3; l401 = l401 + 1) {
				fRec245.at (l401) = 0.0f;
			}
			for (int32 l402 = 0; l402 < 2; l402 = l402 + 1) {
				fRec244.at (l402) = 0.0f;
			}
			for (int32 l403 = 0; l403 < 2048; l403 = l403 + 1) {
				fVec157.at (l403) = 0.0f;
			}
			for (int32 l404 = 0; l404 < 3; l404 = l404 + 1) {
				fRec247.at (l404) = 0.0f;
			}
			for (int32 l405 = 0; l405 < 2; l405 = l405 + 1) {
				fRec246.at (l405) = 0.0f;
			}
			for (int32 l406 = 0; l406 < 256; l406 = l406 + 1) {
				fVec158.at (l406) = 0.0f;
			}
			for (int32 l407 = 0; l407 < 3; l407 = l407 + 1) {
				fRec249.at (l407) = 0.0f;
			}
			for (int32 l408 = 0; l408 < 2; l408 = l408 + 1) {
				fRec248.at (l408) = 0.0f;
			}
			for (int32 l409 = 0; l409 < 512; l409 = l409 + 1) {
				fVec159.at (l409) = 0.0f;
			}
			for (int32 l410 = 0; l410 < 3; l410 = l410 + 1) {
				fRec251.at (l410) = 0.0f;
			}
			for (int32 l411 = 0; l411 < 2; l411 = l411 + 1) {
				fRec250.at (l411) = 0.0f;
			}
		}
		
		void init()
		{
			let sample_rate = int(processor.frequency);
			// classInit is not called here since the tables are actually not shared between instances
			instanceInit (sample_rate);
		}
		
		void instanceInit (int sample_rate)
		{
			// classInit has to be called for each instance since the tables are actually not shared between instances
			classInit (sample_rate);
			instanceConstants (sample_rate);
			instanceResetUserInterface();
			instanceClear();
		}
		
		void control()
		{
			iControl[0] = int32 (fVslider0);
			fControl[0] = float32 (iControl[0]);
			iControl[1] = int32 (fControl[0] <= 0.0f);
			iControl[2] = int32 (fVslider1);
			fControl[1] = float32 (iControl[2]);
			iControl[3] = int32 (fControl[1] <= 0.0f);
			iControl[4] = int32 (fVslider2);
			fControl[2] = float32 (iControl[4]);
			iControl[5] = int32 (fControl[2] <= 0.0f);
			iControl[6] = int32 (fVslider3);
			fControl[3] = float32 (iControl[6]);
			iControl[7] = int32 (fControl[3] <= 0.0f);
			iControl[8] = int32 (fVslider4);
			fControl[4] = float32 (iControl[8]);
			iControl[9] = int32 (fControl[4] <= 0.0f);
			iControl[10] = int32 (fVslider5);
			fControl[5] = float32 (iControl[10]);
			iControl[11] = int32 (fControl[5] <= 0.0f);
		}

		void main()
		{
			// DSP loop running forever...
			loop
			{
				if (fUpdated) { fUpdated = false; control(); }
				
				// Computes one sample
				iVec0[0] = 1;
				iRec2[0] = (iVec0[1] + iRec2[1]) % iConst4;
				int32 iTemp0 = int32 (iRec2[0] <= iRec2[1]);
				iVec1[0] = iTemp0;
				iVec2[0] = iControl[0];
				iRec3[0] = ((bool (iVec1[1])) ? 0 : iRec3[1] + abs (iControl[0] - iVec2[1]));
				iRec4[0] = (iTemp0 + iRec4[1]) % 15;
				ftbl0.at (max (0, min (((bool (iTemp0 & (int32 (iRec3[0] > 0) | iControl[1]))) ? iRec4[0] : 15), 15))) = fControl[0];
				int32 iTemp1 = max (0, min (iRec4[0], 15));
				float32 fTemp2 = ftbl0.at (iTemp1);
				int32 iTemp3 = int32 (abs (fTemp2 + -3.0f) < 0.5f);
				iVec3[0] = iTemp3;
				float32 fTemp4 = 0.2f * float32 (int32 (iTemp3 > iVec3[1]));
				fVec4[0] = fTemp4 + fRec0[1];
				fRec1[0] = 0.996006f * fVec4.at (iConst5) - (fConst7 * fRec1[1] + fConst2 * fRec1[2]);
				fRec0[0] = fConst3 * (fRec1[0] - fRec1[2]);
				fVec5[0] = fTemp4 + fRec5[1];
				fRec6[0] = 0.998001f * fVec5.at (iConst8) - (fConst9 * fRec6[1] + fConst2 * fRec6[2]);
				fRec5[0] = fConst3 * (fRec6[0] - fRec6[2]);
				fVec6[0] = fTemp4 + fRec7[1];
				fRec8[0] = 0.997003f * fVec6.at (iConst10) - (fConst11 * fRec8[1] + fConst2 * fRec8[2]);
				fRec7[0] = fConst3 * (fRec8[0] - fRec8[2]);
				fVec7.at (IOTA0 & 63) = fRec9[1] + fTemp4;
				fRec10[0] = 0.999f * fVec7.at ((IOTA0 - iConst12) & 63) - (fConst13 * fRec10[1] + fConst2 * fRec10[2]);
				fRec9[0] = fConst3 * (fRec10[0] - fRec10[2]);
				int32 iTemp5 = int32 (abs (fTemp2 + -1.0f) < 0.5f);
				iVec8[0] = iTemp5;
				float32 fTemp6 = 0.2f * float32 (int32 (iTemp5 > iVec8[1]));
				fVec9[0] = fTemp6 + fRec11[1];
				fRec12[0] = 0.996006f * fVec9.at (iConst14) - (fConst15 * fRec12[1] + fConst2 * fRec12[2]);
				fRec11[0] = fConst3 * (fRec12[0] - fRec12[2]);
				fVec10[0] = fTemp6 + fRec13[1];
				fRec14[0] = 0.998001f * fVec10.at (iConst16) - (fConst17 * fRec14[1] + fConst2 * fRec14[2]);
				fRec13[0] = fConst3 * (fRec14[0] - fRec14[2]);
				fVec11[0] = fTemp6 + fRec15[1];
				fRec16[0] = 0.997003f * fVec11.at (iConst18) - (fConst19 * fRec16[1] + fConst2 * fRec16[2]);
				fRec15[0] = fConst3 * (fRec16[0] - fRec16[2]);
				fVec12.at (IOTA0 & 63) = fRec17[1] + fTemp6;
				fRec18[0] = 0.999f * fVec12.at ((IOTA0 - iConst20) & 63) - (fConst21 * fRec18[1] + fConst2 * fRec18[2]);
				fRec17[0] = fConst3 * (fRec18[0] - fRec18[2]);
				iVec13[0] = iControl[2];
				iRec21[0] = ((bool (iVec1[1])) ? 0 : iRec21[1] + abs (iControl[2] - iVec13[1]));
				ftbl1.at (max (0, min (((bool (iTemp0 & (int32 (iRec21[0] > 0) | iControl[3]))) ? iRec4[0] : 15), 15))) = fControl[1];
				float32 fTemp7 = ftbl1.at (iTemp1);
				int32 iTemp8 = int32 (abs (fTemp7 + -4.0f) < 0.5f);
				iVec14[0] = iTemp8;
				float32 fTemp9 = 0.2f * float32 (int32 (iTemp8 > iVec14[1]));
				fVec15[0] = fTemp9 + fRec19[1];
				fRec20[0] = 0.996006f * fVec15.at (iConst22) - (fConst23 * fRec20[1] + fConst2 * fRec20[2]);
				fRec19[0] = fConst3 * (fRec20[0] - fRec20[2]);
				fVec16.at (IOTA0 & 31) = fTemp9 + fRec22[1];
				fRec23[0] = 0.998001f * fVec16.at ((IOTA0 - iConst24) & 31) - (fConst25 * fRec23[1] + fConst2 * fRec23[2]);
				fRec22[0] = fConst3 * (fRec23[0] - fRec23[2]);
				fVec17[0] = fTemp9 + fRec24[1];
				fRec25[0] = 0.997003f * fVec17.at (iConst26) - (fConst27 * fRec25[1] + fConst2 * fRec25[2]);
				fRec24[0] = fConst3 * (fRec25[0] - fRec25[2]);
				fVec18.at (IOTA0 & 127) = fRec26[1] + fTemp9;
				fRec27[0] = 0.999f * fVec18.at ((IOTA0 - iConst28) & 127) - (fConst29 * fRec27[1] + fConst2 * fRec27[2]);
				fRec26[0] = fConst3 * (fRec27[0] - fRec27[2]);
				int32 iTemp10 = int32 (abs (fTemp7 + -2.0f) < 0.5f);
				iVec19[0] = iTemp10;
				float32 fTemp11 = 0.2f * float32 (int32 (iTemp10 > iVec19[1]));
				fVec20[0] = fTemp11 + fRec28[1];
				fRec29[0] = 0.996006f * fVec20.at (iConst30) - (fConst31 * fRec29[1] + fConst2 * fRec29[2]);
				fRec28[0] = fConst3 * (fRec29[0] - fRec29[2]);
				fVec21.at (IOTA0 & 31) = fTemp11 + fRec30[1];
				fRec31[0] = 0.998001f * fVec21.at ((IOTA0 - iConst32) & 31) - (fConst33 * fRec31[1] + fConst2 * fRec31[2]);
				fRec30[0] = fConst3 * (fRec31[0] - fRec31[2]);
				fVec22[0] = fTemp11 + fRec32[1];
				fRec33[0] = 0.997003f * fVec22.at (iConst34) - (fConst35 * fRec33[1] + fConst2 * fRec33[2]);
				fRec32[0] = fConst3 * (fRec33[0] - fRec33[2]);
				fVec23.at (IOTA0 & 127) = fRec34[1] + fTemp11;
				fRec35[0] = 0.999f * fVec23.at ((IOTA0 - iConst36) & 127) - (fConst37 * fRec35[1] + fConst2 * fRec35[2]);
				fRec34[0] = fConst3 * (fRec35[0] - fRec35[2]);
				int32 iTemp12 = int32 (abs (fTemp7) < 0.5f);
				iVec24[0] = iTemp12;
				float32 fTemp13 = 0.2f * float32 (int32 (iTemp12 > iVec24[1]));
				fVec25[0] = fTemp13 + fRec36[1];
				fRec37[0] = 0.996006f * fVec25.at (iConst38) - (fConst39 * fRec37[1] + fConst2 * fRec37[2]);
				fRec36[0] = fConst3 * (fRec37[0] - fRec37[2]);
				fVec26.at (IOTA0 & 63) = fTemp13 + fRec38[1];
				fRec39[0] = 0.998001f * fVec26.at ((IOTA0 - iConst40) & 63) - (fConst41 * fRec39[1] + fConst2 * fRec39[2]);
				fRec38[0] = fConst3 * (fRec39[0] - fRec39[2]);
				fVec27[0] = fTemp13 + fRec40[1];
				fRec41[0] = 0.997003f * fVec27.at (iConst42) - (fConst43 * fRec41[1] + fConst2 * fRec41[2]);
				fRec40[0] = fConst3 * (fRec41[0] - fRec41[2]);
				fVec28.at (IOTA0 & 255) = fRec42[1] + fTemp13;
				fRec43[0] = 0.999f * fVec28.at ((IOTA0 - iConst44) & 255) - (fConst45 * fRec43[1] + fConst2 * fRec43[2]);
				fRec42[0] = fConst3 * (fRec43[0] - fRec43[2]);
				iRec46[0] = (iVec0[1] + iRec46[1]) % iConst46;
				int32 iTemp14 = int32 (iRec46[0] <= iRec46[1]);
				iVec29[0] = iTemp14;
				iVec30[0] = iControl[4];
				iRec47[0] = ((bool (iVec29[1])) ? 0 : iRec47[1] + abs (iControl[4] - iVec30[1]));
				iRec48[0] = (iTemp14 + iRec48[1]) % 15;
				ftbl2.at (max (0, min (((bool (iTemp14 & (int32 (iRec47[0] > 0) | iControl[5]))) ? iRec48[0] : 15), 15))) = fControl[2];
				int32 iTemp15 = max (0, min (iRec48[0], 15));
				float32 fTemp16 = ftbl2.at (iTemp15);
				int32 iTemp17 = int32 (abs (fTemp16 + -3.0f) < 0.5f);
				iVec31[0] = iTemp17;
				float32 fTemp18 = 0.2f * float32 (int32 (iTemp17 > iVec31[1]));
				fVec32[0] = fTemp18 + fRec44[1];
				fRec45[0] = 0.996006f * fVec32.at (iConst47) - (fConst48 * fRec45[1] + fConst2 * fRec45[2]);
				fRec44[0] = fConst3 * (fRec45[0] - fRec45[2]);
				fVec33.at (IOTA0 & 63) = fTemp18 + fRec49[1];
				fRec50[0] = 0.998001f * fVec33.at ((IOTA0 - iConst49) & 63) - (fConst50 * fRec50[1] + fConst2 * fRec50[2]);
				fRec49[0] = fConst3 * (fRec50[0] - fRec50[2]);
				fVec34.at (IOTA0 & 31) = fTemp18 + fRec51[1];
				fRec52[0] = 0.997003f * fVec34.at ((IOTA0 - iConst51) & 31) - (fConst52 * fRec52[1] + fConst2 * fRec52[2]);
				fRec51[0] = fConst3 * (fRec52[0] - fRec52[2]);
				fVec35.at (IOTA0 & 255) = fRec53[1] + fTemp18;
				fRec54[0] = 0.999f * fVec35.at ((IOTA0 - iConst53) & 255) - (fConst54 * fRec54[1] + fConst2 * fRec54[2]);
				fRec53[0] = fConst3 * (fRec54[0] - fRec54[2]);
				int32 iTemp19 = int32 (abs (fTemp16 + -1.0f) < 0.5f);
				iVec36[0] = iTemp19;
				float32 fTemp20 = 0.2f * float32 (int32 (iTemp19 > iVec36[1]));
				fVec37[0] = fTemp20 + fRec55[1];
				fRec56[0] = 0.996006f * fVec37.at (iConst55) - (fConst56 * fRec56[1] + fConst2 * fRec56[2]);
				fRec55[0] = fConst3 * (fRec56[0] - fRec56[2]);
				fVec38.at (IOTA0 & 63) = fTemp20 + fRec57[1];
				fRec58[0] = 0.998001f * fVec38.at ((IOTA0 - iConst57) & 63) - (fConst58 * fRec58[1] + fConst2 * fRec58[2]);
				fRec57[0] = fConst3 * (fRec58[0] - fRec58[2]);
				fVec39.at (IOTA0 & 31) = fTemp20 + fRec59[1];
				fRec60[0] = 0.997003f * fVec39.at ((IOTA0 - iConst59) & 31) - (fConst60 * fRec60[1] + fConst2 * fRec60[2]);
				fRec59[0] = fConst3 * (fRec60[0] - fRec60[2]);
				fVec40.at (IOTA0 & 255) = fRec61[1] + fTemp20;
				fRec62[0] = 0.999f * fVec40.at ((IOTA0 - iConst61) & 255) - (fConst62 * fRec62[1] + fConst2 * fRec62[2]);
				fRec61[0] = fConst3 * (fRec62[0] - fRec62[2]);
				iVec41[0] = iControl[6];
				iRec65[0] = ((bool (iVec29[1])) ? 0 : iRec65[1] + abs (iControl[6] - iVec41[1]));
				ftbl3.at (max (0, min (((bool (iTemp14 & (int32 (iRec65[0] > 0) | iControl[7]))) ? iRec48[0] : 15), 15))) = fControl[3];
				float32 fTemp21 = ftbl3.at (iTemp15);
				int32 iTemp22 = int32 (abs (fTemp21 + -4.0f) < 0.5f);
				iVec42[0] = iTemp22;
				float32 fTemp23 = 0.2f * float32 (int32 (iTemp22 > iVec42[1]));
				fVec43.at (IOTA0 & 31) = fTemp23 + fRec63[1];
				fRec64[0] = 0.996006f * fVec43.at ((IOTA0 - iConst63) & 31) - (fConst64 * fRec64[1] + fConst2 * fRec64[2]);
				fRec63[0] = fConst3 * (fRec64[0] - fRec64[2]);
				fVec44.at (IOTA0 & 127) = fTemp23 + fRec66[1];
				fRec67[0] = 0.998001f * fVec44.at ((IOTA0 - iConst65) & 127) - (fConst66 * fRec67[1] + fConst2 * fRec67[2]);
				fRec66[0] = fConst3 * (fRec67[0] - fRec67[2]);
				fVec45.at (IOTA0 & 31) = fTemp23 + fRec68[1];
				fRec69[0] = 0.997003f * fVec45.at ((IOTA0 - iConst67) & 31) - (fConst68 * fRec69[1] + fConst2 * fRec69[2]);
				fRec68[0] = fConst3 * (fRec69[0] - fRec69[2]);
				fVec46.at (IOTA0 & 511) = fRec70[1] + fTemp23;
				fRec71[0] = 0.999f * fVec46.at ((IOTA0 - iConst69) & 511) - (fConst70 * fRec71[1] + fConst2 * fRec71[2]);
				fRec70[0] = fConst3 * (fRec71[0] - fRec71[2]);
				int32 iTemp24 = int32 (abs (fTemp21 + -2.0f) < 0.5f);
				iVec47[0] = iTemp24;
				float32 fTemp25 = 0.2f * float32 (int32 (iTemp24 > iVec47[1]));
				fVec48.at (IOTA0 & 31) = fTemp25 + fRec72[1];
				fRec73[0] = 0.996006f * fVec48.at ((IOTA0 - iConst71) & 31) - (fConst72 * fRec73[1] + fConst2 * fRec73[2]);
				fRec72[0] = fConst3 * (fRec73[0] - fRec73[2]);
				fVec49.at (IOTA0 & 127) = fTemp25 + fRec74[1];
				fRec75[0] = 0.998001f * fVec49.at ((IOTA0 - iConst73) & 127) - (fConst74 * fRec75[1] + fConst2 * fRec75[2]);
				fRec74[0] = fConst3 * (fRec75[0] - fRec75[2]);
				fVec50.at (IOTA0 & 63) = fTemp25 + fRec76[1];
				fRec77[0] = 0.997003f * fVec50.at ((IOTA0 - iConst75) & 63) - (fConst76 * fRec77[1] + fConst2 * fRec77[2]);
				fRec76[0] = fConst3 * (fRec77[0] - fRec77[2]);
				fVec51.at (IOTA0 & 511) = fRec78[1] + fTemp25;
				fRec79[0] = 0.999f * fVec51.at ((IOTA0 - iConst77) & 511) - (fConst78 * fRec79[1] + fConst2 * fRec79[2]);
				fRec78[0] = fConst3 * (fRec79[0] - fRec79[2]);
				int32 iTemp26 = int32 (abs (fTemp21) < 0.5f);
				iVec52[0] = iTemp26;
				float32 fTemp27 = 0.2f * float32 (int32 (iTemp26 > iVec52[1]));
				fVec53.at (IOTA0 & 31) = fTemp27 + fRec80[1];
				fRec81[0] = 0.996006f * fVec53.at ((IOTA0 - iConst79) & 31) - (fConst80 * fRec81[1] + fConst2 * fRec81[2]);
				fRec80[0] = fConst3 * (fRec81[0] - fRec81[2]);
				fVec54.at (IOTA0 & 255) = fTemp27 + fRec82[1];
				fRec83[0] = 0.998001f * fVec54.at ((IOTA0 - iConst81) & 255) - (fConst82 * fRec83[1] + fConst2 * fRec83[2]);
				fRec82[0] = fConst3 * (fRec83[0] - fRec83[2]);
				fVec55.at (IOTA0 & 63) = fTemp27 + fRec84[1];
				fRec85[0] = 0.997003f * fVec55.at ((IOTA0 - iConst83) & 63) - (fConst84 * fRec85[1] + fConst2 * fRec85[2]);
				fRec84[0] = fConst3 * (fRec85[0] - fRec85[2]);
				fVec56.at (IOTA0 & 1023) = fRec86[1] + fTemp27;
				fRec87[0] = 0.999f * fVec56.at ((IOTA0 - iConst85) & 1023) - (fConst86 * fRec87[1] + fConst2 * fRec87[2]);
				fRec86[0] = fConst3 * (fRec87[0] - fRec87[2]);
				iRec90[0] = (iVec0[1] + iRec90[1]) % iConst87;
				int32 iTemp28 = int32 (iRec90[0] <= iRec90[1]);
				iVec57[0] = iTemp28;
				iVec58[0] = iControl[8];
				iRec91[0] = ((bool (iVec57[1])) ? 0 : iRec91[1] + abs (iControl[8] - iVec58[1]));
				iRec92[0] = (iTemp28 + iRec92[1]) % 15;
				ftbl4.at (max (0, min (((bool (iTemp28 & (int32 (iRec91[0] > 0) | iControl[9]))) ? iRec92[0] : 15), 15))) = fControl[4];
				int32 iTemp29 = max (0, min (iRec92[0], 15));
				float32 fTemp30 = ftbl4.at (iTemp29);
				int32 iTemp31 = int32 (abs (fTemp30 + -3.0f) < 0.5f);
				iVec59[0] = iTemp31;
				float32 fTemp32 = 0.2f * float32 (int32 (iTemp31 > iVec59[1]));
				fVec60.at (IOTA0 & 63) = fTemp32 + fRec88[1];
				fRec89[0] = 0.996006f * fVec60.at ((IOTA0 - iConst88) & 63) - (fConst89 * fRec89[1] + fConst2 * fRec89[2]);
				fRec88[0] = fConst3 * (fRec89[0] - fRec89[2]);
				fVec61.at (IOTA0 & 255) = fTemp32 + fRec93[1];
				fRec94[0] = 0.998001f * fVec61.at ((IOTA0 - iConst90) & 255) - (fConst91 * fRec94[1] + fConst2 * fRec94[2]);
				fRec93[0] = fConst3 * (fRec94[0] - fRec94[2]);
				fVec62.at (IOTA0 & 127) = fTemp32 + fRec95[1];
				fRec96[0] = 0.997003f * fVec62.at ((IOTA0 - iConst92) & 127) - (fConst93 * fRec96[1] + fConst2 * fRec96[2]);
				fRec95[0] = fConst3 * (fRec96[0] - fRec96[2]);
				fVec63.at (IOTA0 & 1023) = fRec97[1] + fTemp32;
				fRec98[0] = 0.999f * fVec63.at ((IOTA0 - iConst94) & 1023) - (fConst95 * fRec98[1] + fConst2 * fRec98[2]);
				fRec97[0] = fConst3 * (fRec98[0] - fRec98[2]);
				int32 iTemp33 = int32 (abs (fTemp30 + -1.0f) < 0.5f);
				iVec64[0] = iTemp33;
				float32 fTemp34 = 0.2f * float32 (int32 (iTemp33 > iVec64[1]));
				fVec65.at (IOTA0 & 63) = fTemp34 + fRec99[1];
				fRec100[0] = 0.996006f * fVec65.at ((IOTA0 - iConst96) & 63) - (fConst97 * fRec100[1] + fConst2 * fRec100[2]);
				fRec99[0] = fConst3 * (fRec100[0] - fRec100[2]);
				fVec66.at (IOTA0 & 255) = fTemp34 + fRec101[1];
				fRec102[0] = 0.998001f * fVec66.at ((IOTA0 - iConst98) & 255) - (fConst99 * fRec102[1] + fConst2 * fRec102[2]);
				fRec101[0] = fConst3 * (fRec102[0] - fRec102[2]);
				fVec67.at (IOTA0 & 127) = fTemp34 + fRec103[1];
				fRec104[0] = 0.997003f * fVec67.at ((IOTA0 - iConst100) & 127) - (fConst101 * fRec104[1] + fConst2 * fRec104[2]);
				fRec103[0] = fConst3 * (fRec104[0] - fRec104[2]);
				fVec68.at (IOTA0 & 1023) = fRec105[1] + fTemp34;
				fRec106[0] = 0.999f * fVec68.at ((IOTA0 - iConst102) & 1023) - (fConst103 * fRec106[1] + fConst2 * fRec106[2]);
				fRec105[0] = fConst3 * (fRec106[0] - fRec106[2]);
				iVec69[0] = iControl[10];
				iRec109[0] = ((bool (iVec57[1])) ? 0 : iRec109[1] + abs (iControl[10] - iVec69[1]));
				ftbl5.at (max (0, min (((bool (iTemp28 & (int32 (iRec109[0] > 0) | iControl[11]))) ? iRec92[0] : 15), 15))) = fControl[5];
				float32 fTemp35 = ftbl5.at (iTemp29);
				int32 iTemp36 = int32 (abs (fTemp35 + -4.0f) < 0.5f);
				iVec70[0] = iTemp36;
				float32 fTemp37 = 0.2f * float32 (int32 (iTemp36 > iVec70[1]));
				fVec71.at (IOTA0 & 127) = fTemp37 + fRec107[1];
				fRec108[0] = 0.996006f * fVec71.at ((IOTA0 - iConst104) & 127) - (fConst105 * fRec108[1] + fConst2 * fRec108[2]);
				fRec107[0] = fConst3 * (fRec108[0] - fRec108[2]);
				fVec72.at (IOTA0 & 511) = fTemp37 + fRec110[1];
				fRec111[0] = 0.998001f * fVec72.at ((IOTA0 - iConst106) & 511) - (fConst107 * fRec111[1] + fConst2 * fRec111[2]);
				fRec110[0] = fConst3 * (fRec111[0] - fRec111[2]);
				fVec73.at (IOTA0 & 127) = fTemp37 + fRec112[1];
				fRec113[0] = 0.997003f * fVec73.at ((IOTA0 - iConst108) & 127) - (fConst109 * fRec113[1] + fConst2 * fRec113[2]);
				fRec112[0] = fConst3 * (fRec113[0] - fRec113[2]);
				fVec74.at (IOTA0 & 2047) = fRec114[1] + fTemp37;
				fRec115[0] = 0.999f * fVec74.at ((IOTA0 - iConst110) & 2047) - (fConst111 * fRec115[1] + fConst2 * fRec115[2]);
				fRec114[0] = fConst3 * (fRec115[0] - fRec115[2]);
				int32 iTemp38 = int32 (abs (fTemp35 + -2.0f) < 0.5f);
				iVec75[0] = iTemp38;
				float32 fTemp39 = 0.2f * float32 (int32 (iTemp38 > iVec75[1]));
				fVec76.at (IOTA0 & 127) = fTemp39 + fRec116[1];
				fRec117[0] = 0.996006f * fVec76.at ((IOTA0 - iConst112) & 127) - (fConst113 * fRec117[1] + fConst2 * fRec117[2]);
				fRec116[0] = fConst3 * (fRec117[0] - fRec117[2]);
				fVec77.at (IOTA0 & 511) = fTemp39 + fRec118[1];
				fRec119[0] = 0.998001f * fVec77.at ((IOTA0 - iConst114) & 511) - (fConst115 * fRec119[1] + fConst2 * fRec119[2]);
				fRec118[0] = fConst3 * (fRec119[0] - fRec119[2]);
				fVec78.at (IOTA0 & 255) = fTemp39 + fRec120[1];
				fRec121[0] = 0.997003f * fVec78.at ((IOTA0 - iConst116) & 255) - (fConst117 * fRec121[1] + fConst2 * fRec121[2]);
				fRec120[0] = fConst3 * (fRec121[0] - fRec121[2]);
				fVec79.at (IOTA0 & 2047) = fRec122[1] + fTemp39;
				fRec123[0] = 0.999f * fVec79.at ((IOTA0 - iConst118) & 2047) - (fConst119 * fRec123[1] + fConst2 * fRec123[2]);
				fRec122[0] = fConst3 * (fRec123[0] - fRec123[2]);
				int32 iTemp40 = int32 (abs (fTemp35) < 0.5f);
				iVec80[0] = iTemp40;
				float32 fTemp41 = 0.2f * float32 (int32 (iTemp40 > iVec80[1]));
				fVec81.at (IOTA0 & 127) = fTemp41 + fRec124[1];
				fRec125[0] = 0.996006f * fVec81.at ((IOTA0 - iConst120) & 127) - (fConst121 * fRec125[1] + fConst2 * fRec125[2]);
				fRec124[0] = fConst3 * (fRec125[0] - fRec125[2]);
				fVec82.at (IOTA0 & 4095) = fRec126[1] + fTemp41;
				fRec127[0] = 0.999f * fVec82.at ((IOTA0 - iConst122) & 4095) - (fConst123 * fRec127[1] + fConst2 * fRec127[2]);
				fRec126[0] = fConst3 * (fRec127[0] - fRec127[2]);
				fVec83.at (IOTA0 & 255) = fTemp41 + fRec128[1];
				fRec129[0] = 0.997003f * fVec83.at ((IOTA0 - iConst124) & 255) - (fConst125 * fRec129[1] + fConst2 * fRec129[2]);
				fRec128[0] = fConst3 * (fRec129[0] - fRec129[2]);
				fVec84.at (IOTA0 & 1023) = fTemp41 + fRec130[1];
				fRec131[0] = 0.998001f * fVec84.at ((IOTA0 - iConst126) & 1023) - (fConst127 * fRec131[1] + fConst2 * fRec131[2]);
				fRec130[0] = fConst3 * (fRec131[0] - fRec131[2]);
				output0 <- 4.0f * (fRec0[0] + fRec5[0] + fRec7[0] + fRec9[0] + fRec11[0] + fRec13[0] + fRec15[0] + fRec17[0] + fRec19[0] + fRec22[0] + fRec24[0] + fRec26[0] + fRec28[0] + fRec30[0] + fRec32[0] + fRec34[0] + fRec36[0] + fRec38[0] + fRec40[0] + fRec42[0] + fRec44[0] + fRec49[0] + fRec51[0] + fRec53[0] + fRec55[0] + fRec57[0] + fRec59[0] + fRec61[0] + fRec63[0] + fRec66[0] + fRec68[0] + fRec70[0] + fRec72[0] + fRec74[0] + fRec76[0] + fRec78[0] + fRec80[0] + fRec82[0] + fRec84[0] + fRec86[0] + fRec88[0] + fRec93[0] + fRec95[0] + fRec97[0] + fRec99[0] + fRec101[0] + fRec103[0] + fRec105[0] + fRec107[0] + fRec110[0] + fRec112[0] + fRec114[0] + fRec116[0] + fRec118[0] + fRec120[0] + fRec122[0] + fRec124[0] + fRec126[0] + fRec128[0] + fRec130[0]);
				int32 iTemp42 = int32 (abs (fTemp2 + -4.0f) < 0.5f);
				iVec85[0] = iTemp42;
				float32 fTemp43 = 0.2f * float32 (int32 (iTemp42 > iVec85[1]));
				fVec86[0] = fTemp43 + fRec132[1];
				fRec133[0] = 0.996006f * fVec86.at (iConst128) - (fConst129 * fRec133[1] + fConst2 * fRec133[2]);
				fRec132[0] = fConst3 * (fRec133[0] - fRec133[2]);
				fVec87[0] = fTemp43 + fRec134[1];
				fRec135[0] = 0.998001f * fVec87.at (iConst130) - (fConst131 * fRec135[1] + fConst2 * fRec135[2]);
				fRec134[0] = fConst3 * (fRec135[0] - fRec135[2]);
				fVec88[0] = fTemp43 + fRec136[1];
				fRec137[0] = 0.997003f * fVec88.at (iConst132) - (fConst133 * fRec137[1] + fConst2 * fRec137[2]);
				fRec136[0] = fConst3 * (fRec137[0] - fRec137[2]);
				fVec89.at (IOTA0 & 63) = fRec138[1] + fTemp43;
				fRec139[0] = 0.999f * fVec89.at ((IOTA0 - iConst134) & 63) - (fConst135 * fRec139[1] + fConst2 * fRec139[2]);
				fRec138[0] = fConst3 * (fRec139[0] - fRec139[2]);
				int32 iTemp44 = int32 (abs (fTemp2 + -2.0f) < 0.5f);
				iVec90[0] = iTemp44;
				float32 fTemp45 = 0.2f * float32 (int32 (iTemp44 > iVec90[1]));
				fVec91[0] = fTemp45 + fRec140[1];
				fRec141[0] = 0.996006f * fVec91.at (iConst136) - (fConst137 * fRec141[1] + fConst2 * fRec141[2]);
				fRec140[0] = fConst3 * (fRec141[0] - fRec141[2]);
				fVec92[0] = fTemp45 + fRec142[1];
				fRec143[0] = 0.998001f * fVec92.at (iConst138) - (fConst139 * fRec143[1] + fConst2 * fRec143[2]);
				fRec142[0] = fConst3 * (fRec143[0] - fRec143[2]);
				fVec93[0] = fTemp45 + fRec144[1];
				fRec145[0] = 0.997003f * fVec93.at (iConst140) - (fConst141 * fRec145[1] + fConst2 * fRec145[2]);
				fRec144[0] = fConst3 * (fRec145[0] - fRec145[2]);
				fVec94.at (IOTA0 & 63) = fRec146[1] + fTemp45;
				fRec147[0] = 0.999f * fVec94.at ((IOTA0 - iConst142) & 63) - (fConst143 * fRec147[1] + fConst2 * fRec147[2]);
				fRec146[0] = fConst3 * (fRec147[0] - fRec147[2]);
				int32 iTemp46 = int32 (abs (fTemp2) < 0.5f);
				iVec95[0] = iTemp46;
				float32 fTemp47 = 0.2f * float32 (int32 (iTemp46 > iVec95[1]));
				fVec96[0] = fTemp47 + fRec148[1];
				fRec149[0] = 0.996006f * fVec96.at (iConst144) - (fConst145 * fRec149[1] + fConst2 * fRec149[2]);
				fRec148[0] = fConst3 * (fRec149[0] - fRec149[2]);
				fVec97.at (IOTA0 & 31) = fTemp47 + fRec150[1];
				fRec151[0] = 0.998001f * fVec97.at ((IOTA0 - iConst146) & 31) - (fConst147 * fRec151[1] + fConst2 * fRec151[2]);
				fRec150[0] = fConst3 * (fRec151[0] - fRec151[2]);
				fVec98[0] = fTemp47 + fRec152[1];
				fRec153[0] = 0.997003f * fVec98.at (iConst148) - (fConst149 * fRec153[1] + fConst2 * fRec153[2]);
				fRec152[0] = fConst3 * (fRec153[0] - fRec153[2]);
				fVec99.at (IOTA0 & 127) = fRec154[1] + fTemp47;
				fRec155[0] = 0.999f * fVec99.at ((IOTA0 - iConst150) & 127) - (fConst151 * fRec155[1] + fConst2 * fRec155[2]);
				fRec154[0] = fConst3 * (fRec155[0] - fRec155[2]);
				int32 iTemp48 = int32 (abs (fTemp7 + -3.0f) < 0.5f);
				iVec100[0] = iTemp48;
				float32 fTemp49 = 0.2f * float32 (int32 (iTemp48 > iVec100[1]));
				fVec101[0] = fTemp49 + fRec156[1];
				fRec157[0] = 0.996006f * fVec101.at (iConst152) - (fConst153 * fRec157[1] + fConst2 * fRec157[2]);
				fRec156[0] = fConst3 * (fRec157[0] - fRec157[2]);
				fVec102.at (IOTA0 & 31) = fTemp49 + fRec158[1];
				fRec159[0] = 0.998001f * fVec102.at ((IOTA0 - iConst154) & 31) - (fConst155 * fRec159[1] + fConst2 * fRec159[2]);
				fRec158[0] = fConst3 * (fRec159[0] - fRec159[2]);
				fVec103[0] = fTemp49 + fRec160[1];
				fRec161[0] = 0.997003f * fVec103.at (iConst156) - (fConst157 * fRec161[1] + fConst2 * fRec161[2]);
				fRec160[0] = fConst3 * (fRec161[0] - fRec161[2]);
				fVec104.at (IOTA0 & 127) = fRec162[1] + fTemp49;
				fRec163[0] = 0.999f * fVec104.at ((IOTA0 - iConst158) & 127) - (fConst159 * fRec163[1] + fConst2 * fRec163[2]);
				fRec162[0] = fConst3 * (fRec163[0] - fRec163[2]);
				int32 iTemp50 = int32 (abs (fTemp7 + -1.0f) < 0.5f);
				iVec105[0] = iTemp50;
				float32 fTemp51 = 0.2f * float32 (int32 (iTemp50 > iVec105[1]));
				fVec106[0] = fTemp51 + fRec164[1];
				fRec165[0] = 0.996006f * fVec106.at (iConst160) - (fConst161 * fRec165[1] + fConst2 * fRec165[2]);
				fRec164[0] = fConst3 * (fRec165[0] - fRec165[2]);
				fVec107.at (IOTA0 & 31) = fTemp51 + fRec166[1];
				fRec167[0] = 0.998001f * fVec107.at ((IOTA0 - iConst162) & 31) - (fConst163 * fRec167[1] + fConst2 * fRec167[2]);
				fRec166[0] = fConst3 * (fRec167[0] - fRec167[2]);
				fVec108[0] = fTemp51 + fRec168[1];
				fRec169[0] = 0.997003f * fVec108.at (iConst164) - (fConst165 * fRec169[1] + fConst2 * fRec169[2]);
				fRec168[0] = fConst3 * (fRec169[0] - fRec169[2]);
				fVec109.at (IOTA0 & 127) = fRec170[1] + fTemp51;
				fRec171[0] = 0.999f * fVec109.at ((IOTA0 - iConst166) & 127) - (fConst167 * fRec171[1] + fConst2 * fRec171[2]);
				fRec170[0] = fConst3 * (fRec171[0] - fRec171[2]);
				int32 iTemp52 = int32 (abs (fTemp16 + -4.0f) < 0.5f);
				iVec110[0] = iTemp52;
				float32 fTemp53 = 0.2f * float32 (int32 (iTemp52 > iVec110[1]));
				fVec111[0] = fTemp53 + fRec172[1];
				fRec173[0] = 0.996006f * fVec111.at (iConst168) - (fConst169 * fRec173[1] + fConst2 * fRec173[2]);
				fRec172[0] = fConst3 * (fRec173[0] - fRec173[2]);
				fVec112.at (IOTA0 & 63) = fTemp53 + fRec174[1];
				fRec175[0] = 0.998001f * fVec112.at ((IOTA0 - iConst170) & 63) - (fConst171 * fRec175[1] + fConst2 * fRec175[2]);
				fRec174[0] = fConst3 * (fRec175[0] - fRec175[2]);
				fVec113[0] = fTemp53 + fRec176[1];
				fRec177[0] = 0.997003f * fVec113.at (iConst172) - (fConst173 * fRec177[1] + fConst2 * fRec177[2]);
				fRec176[0] = fConst3 * (fRec177[0] - fRec177[2]);
				fVec114.at (IOTA0 & 255) = fRec178[1] + fTemp53;
				fRec179[0] = 0.999f * fVec114.at ((IOTA0 - iConst174) & 255) - (fConst175 * fRec179[1] + fConst2 * fRec179[2]);
				fRec178[0] = fConst3 * (fRec179[0] - fRec179[2]);
				int32 iTemp54 = int32 (abs (fTemp16 + -2.0f) < 0.5f);
				iVec115[0] = iTemp54;
				float32 fTemp55 = 0.2f * float32 (int32 (iTemp54 > iVec115[1]));
				fVec116[0] = fTemp55 + fRec180[1];
				fRec181[0] = 0.996006f * fVec116.at (iConst176) - (fConst177 * fRec181[1] + fConst2 * fRec181[2]);
				fRec180[0] = fConst3 * (fRec181[0] - fRec181[2]);
				fVec117.at (IOTA0 & 63) = fTemp55 + fRec182[1];
				fRec183[0] = 0.998001f * fVec117.at ((IOTA0 - iConst178) & 63) - (fConst179 * fRec183[1] + fConst2 * fRec183[2]);
				fRec182[0] = fConst3 * (fRec183[0] - fRec183[2]);
				fVec118.at (IOTA0 & 31) = fTemp55 + fRec184[1];
				fRec185[0] = 0.997003f * fVec118.at ((IOTA0 - iConst180) & 31) - (fConst181 * fRec185[1] + fConst2 * fRec185[2]);
				fRec184[0] = fConst3 * (fRec185[0] - fRec185[2]);
				fVec119.at (IOTA0 & 255) = fRec186[1] + fTemp55;
				fRec187[0] = 0.999f * fVec119.at ((IOTA0 - iConst182) & 255) - (fConst183 * fRec187[1] + fConst2 * fRec187[2]);
				fRec186[0] = fConst3 * (fRec187[0] - fRec187[2]);
				int32 iTemp56 = int32 (abs (fTemp16) < 0.5f);
				iVec120[0] = iTemp56;
				float32 fTemp57 = 0.2f * float32 (int32 (iTemp56 > iVec120[1]));
				fVec121[0] = fTemp57 + fRec188[1];
				fRec189[0] = 0.996006f * fVec121.at (iConst184) - (fConst185 * fRec189[1] + fConst2 * fRec189[2]);
				fRec188[0] = fConst3 * (fRec189[0] - fRec189[2]);
				fVec122.at (IOTA0 & 127) = fTemp57 + fRec190[1];
				fRec191[0] = 0.998001f * fVec122.at ((IOTA0 - iConst186) & 127) - (fConst187 * fRec191[1] + fConst2 * fRec191[2]);
				fRec190[0] = fConst3 * (fRec191[0] - fRec191[2]);
				fVec123.at (IOTA0 & 31) = fTemp57 + fRec192[1];
				fRec193[0] = 0.997003f * fVec123.at ((IOTA0 - iConst188) & 31) - (fConst189 * fRec193[1] + fConst2 * fRec193[2]);
				fRec192[0] = fConst3 * (fRec193[0] - fRec193[2]);
				fVec124.at (IOTA0 & 511) = fRec194[1] + fTemp57;
				fRec195[0] = 0.999f * fVec124.at ((IOTA0 - iConst190) & 511) - (fConst191 * fRec195[1] + fConst2 * fRec195[2]);
				fRec194[0] = fConst3 * (fRec195[0] - fRec195[2]);
				int32 iTemp58 = int32 (abs (fTemp21 + -3.0f) < 0.5f);
				iVec125[0] = iTemp58;
				float32 fTemp59 = 0.2f * float32 (int32 (iTemp58 > iVec125[1]));
				fVec126.at (IOTA0 & 31) = fTemp59 + fRec196[1];
				fRec197[0] = 0.996006f * fVec126.at ((IOTA0 - iConst192) & 31) - (fConst193 * fRec197[1] + fConst2 * fRec197[2]);
				fRec196[0] = fConst3 * (fRec197[0] - fRec197[2]);
				fVec127.at (IOTA0 & 127) = fTemp59 + fRec198[1];
				fRec199[0] = 0.998001f * fVec127.at ((IOTA0 - iConst194) & 127) - (fConst195 * fRec199[1] + fConst2 * fRec199[2]);
				fRec198[0] = fConst3 * (fRec199[0] - fRec199[2]);
				fVec128.at (IOTA0 & 63) = fTemp59 + fRec200[1];
				fRec201[0] = 0.997003f * fVec128.at ((IOTA0 - iConst196) & 63) - (fConst197 * fRec201[1] + fConst2 * fRec201[2]);
				fRec200[0] = fConst3 * (fRec201[0] - fRec201[2]);
				fVec129.at (IOTA0 & 511) = fRec202[1] + fTemp59;
				fRec203[0] = 0.999f * fVec129.at ((IOTA0 - iConst198) & 511) - (fConst199 * fRec203[1] + fConst2 * fRec203[2]);
				fRec202[0] = fConst3 * (fRec203[0] - fRec203[2]);
				int32 iTemp60 = int32 (abs (fTemp21 + -1.0f) < 0.5f);
				iVec130[0] = iTemp60;
				float32 fTemp61 = 0.2f * float32 (int32 (iTemp60 > iVec130[1]));
				fVec131.at (IOTA0 & 31) = fTemp61 + fRec204[1];
				fRec205[0] = 0.996006f * fVec131.at ((IOTA0 - iConst200) & 31) - (fConst201 * fRec205[1] + fConst2 * fRec205[2]);
				fRec204[0] = fConst3 * (fRec205[0] - fRec205[2]);
				fVec132.at (IOTA0 & 127) = fTemp61 + fRec206[1];
				fRec207[0] = 0.998001f * fVec132.at ((IOTA0 - iConst202) & 127) - (fConst203 * fRec207[1] + fConst2 * fRec207[2]);
				fRec206[0] = fConst3 * (fRec207[0] - fRec207[2]);
				fVec133.at (IOTA0 & 63) = fTemp61 + fRec208[1];
				fRec209[0] = 0.997003f * fVec133.at ((IOTA0 - iConst204) & 63) - (fConst205 * fRec209[1] + fConst2 * fRec209[2]);
				fRec208[0] = fConst3 * (fRec209[0] - fRec209[2]);
				fVec134.at (IOTA0 & 511) = fRec210[1] + fTemp61;
				fRec211[0] = 0.999f * fVec134.at ((IOTA0 - iConst206) & 511) - (fConst207 * fRec211[1] + fConst2 * fRec211[2]);
				fRec210[0] = fConst3 * (fRec211[0] - fRec211[2]);
				int32 iTemp62 = int32 (abs (fTemp30 + -4.0f) < 0.5f);
				iVec135[0] = iTemp62;
				float32 fTemp63 = 0.2f * float32 (int32 (iTemp62 > iVec135[1]));
				fVec136.at (IOTA0 & 63) = fTemp63 + fRec212[1];
				fRec213[0] = 0.996006f * fVec136.at ((IOTA0 - iConst208) & 63) - (fConst209 * fRec213[1] + fConst2 * fRec213[2]);
				fRec212[0] = fConst3 * (fRec213[0] - fRec213[2]);
				fVec137.at (IOTA0 & 255) = fTemp63 + fRec214[1];
				fRec215[0] = 0.998001f * fVec137.at ((IOTA0 - iConst210) & 255) - (fConst211 * fRec215[1] + fConst2 * fRec215[2]);
				fRec214[0] = fConst3 * (fRec215[0] - fRec215[2]);
				fVec138.at (IOTA0 & 63) = fTemp63 + fRec216[1];
				fRec217[0] = 0.997003f * fVec138.at ((IOTA0 - iConst212) & 63) - (fConst213 * fRec217[1] + fConst2 * fRec217[2]);
				fRec216[0] = fConst3 * (fRec217[0] - fRec217[2]);
				fVec139.at (IOTA0 & 1023) = fRec218[1] + fTemp63;
				fRec219[0] = 0.999f * fVec139.at ((IOTA0 - iConst214) & 1023) - (fConst215 * fRec219[1] + fConst2 * fRec219[2]);
				fRec218[0] = fConst3 * (fRec219[0] - fRec219[2]);
				int32 iTemp64 = int32 (abs (fTemp30 + -2.0f) < 0.5f);
				iVec140[0] = iTemp64;
				float32 fTemp65 = 0.2f * float32 (int32 (iTemp64 > iVec140[1]));
				fVec141.at (IOTA0 & 63) = fTemp65 + fRec220[1];
				fRec221[0] = 0.996006f * fVec141.at ((IOTA0 - iConst216) & 63) - (fConst217 * fRec221[1] + fConst2 * fRec221[2]);
				fRec220[0] = fConst3 * (fRec221[0] - fRec221[2]);
				fVec142.at (IOTA0 & 255) = fTemp65 + fRec222[1];
				fRec223[0] = 0.998001f * fVec142.at ((IOTA0 - iConst218) & 255) - (fConst219 * fRec223[1] + fConst2 * fRec223[2]);
				fRec222[0] = fConst3 * (fRec223[0] - fRec223[2]);
				fVec143.at (IOTA0 & 127) = fTemp65 + fRec224[1];
				fRec225[0] = 0.997003f * fVec143.at ((IOTA0 - iConst220) & 127) - (fConst221 * fRec225[1] + fConst2 * fRec225[2]);
				fRec224[0] = fConst3 * (fRec225[0] - fRec225[2]);
				fVec144.at (IOTA0 & 1023) = fRec226[1] + fTemp65;
				fRec227[0] = 0.999f * fVec144.at ((IOTA0 - iConst222) & 1023) - (fConst223 * fRec227[1] + fConst2 * fRec227[2]);
				fRec226[0] = fConst3 * (fRec227[0] - fRec227[2]);
				int32 iTemp66 = int32 (abs (fTemp30) < 0.5f);
				iVec145[0] = iTemp66;
				float32 fTemp67 = 0.2f * float32 (int32 (iTemp66 > iVec145[1]));
				fVec146.at (IOTA0 & 63) = fTemp67 + fRec228[1];
				fRec229[0] = 0.996006f * fVec146.at ((IOTA0 - iConst224) & 63) - (fConst225 * fRec229[1] + fConst2 * fRec229[2]);
				fRec228[0] = fConst3 * (fRec229[0] - fRec229[2]);
				fVec147.at (IOTA0 & 511) = fTemp67 + fRec230[1];
				fRec231[0] = 0.998001f * fVec147.at ((IOTA0 - iConst226) & 511) - (fConst227 * fRec231[1] + fConst2 * fRec231[2]);
				fRec230[0] = fConst3 * (fRec231[0] - fRec231[2]);
				fVec148.at (IOTA0 & 127) = fTemp67 + fRec232[1];
				fRec233[0] = 0.997003f * fVec148.at ((IOTA0 - iConst228) & 127) - (fConst229 * fRec233[1] + fConst2 * fRec233[2]);
				fRec232[0] = fConst3 * (fRec233[0] - fRec233[2]);
				fVec149.at (IOTA0 & 2047) = fRec234[1] + fTemp67;
				fRec235[0] = 0.999f * fVec149.at ((IOTA0 - iConst230) & 2047) - (fConst231 * fRec235[1] + fConst2 * fRec235[2]);
				fRec234[0] = fConst3 * (fRec235[0] - fRec235[2]);
				int32 iTemp68 = int32 (abs (fTemp35 + -3.0f) < 0.5f);
				iVec150[0] = iTemp68;
				float32 fTemp69 = 0.2f * float32 (int32 (iTemp68 > iVec150[1]));
				fVec151.at (IOTA0 & 127) = fTemp69 + fRec236[1];
				fRec237[0] = 0.996006f * fVec151.at ((IOTA0 - iConst232) & 127) - (fConst233 * fRec237[1] + fConst2 * fRec237[2]);
				fRec236[0] = fConst3 * (fRec237[0] - fRec237[2]);
				fVec152.at (IOTA0 & 511) = fTemp69 + fRec238[1];
				fRec239[0] = 0.998001f * fVec152.at ((IOTA0 - iConst234) & 511) - (fConst235 * fRec239[1] + fConst2 * fRec239[2]);
				fRec238[0] = fConst3 * (fRec239[0] - fRec239[2]);
				fVec153.at (IOTA0 & 255) = fTemp69 + fRec240[1];
				fRec241[0] = 0.997003f * fVec153.at ((IOTA0 - iConst236) & 255) - (fConst237 * fRec241[1] + fConst2 * fRec241[2]);
				fRec240[0] = fConst3 * (fRec241[0] - fRec241[2]);
				fVec154.at (IOTA0 & 2047) = fRec242[1] + fTemp69;
				fRec243[0] = 0.999f * fVec154.at ((IOTA0 - iConst238) & 2047) - (fConst239 * fRec243[1] + fConst2 * fRec243[2]);
				fRec242[0] = fConst3 * (fRec243[0] - fRec243[2]);
				int32 iTemp70 = int32 (abs (fTemp35 + -1.0f) < 0.5f);
				iVec155[0] = iTemp70;
				float32 fTemp71 = 0.2f * float32 (int32 (iTemp70 > iVec155[1]));
				fVec156.at (IOTA0 & 127) = fTemp71 + fRec244[1];
				fRec245[0] = 0.996006f * fVec156.at ((IOTA0 - iConst240) & 127) - (fConst241 * fRec245[1] + fConst2 * fRec245[2]);
				fRec244[0] = fConst3 * (fRec245[0] - fRec245[2]);
				fVec157.at (IOTA0 & 2047) = fRec246[1] + fTemp71;
				fRec247[0] = 0.999f * fVec157.at ((IOTA0 - iConst242) & 2047) - (fConst243 * fRec247[1] + fConst2 * fRec247[2]);
				fRec246[0] = fConst3 * (fRec247[0] - fRec247[2]);
				fVec158.at (IOTA0 & 255) = fTemp71 + fRec248[1];
				fRec249[0] = 0.997003f * fVec158.at ((IOTA0 - iConst244) & 255) - (fConst245 * fRec249[1] + fConst2 * fRec249[2]);
				fRec248[0] = fConst3 * (fRec249[0] - fRec249[2]);
				fVec159.at (IOTA0 & 511) = fTemp71 + fRec250[1];
				fRec251[0] = 0.998001f * fVec159.at ((IOTA0 - iConst246) & 511) - (fConst247 * fRec251[1] + fConst2 * fRec251[2]);
				fRec250[0] = fConst3 * (fRec251[0] - fRec251[2]);
				output1 <- 4.0f * (fRec132[0] + fRec134[0] + fRec136[0] + fRec138[0] + fRec140[0] + fRec142[0] + fRec144[0] + fRec146[0] + fRec148[0] + fRec150[0] + fRec152[0] + fRec154[0] + fRec156[0] + fRec158[0] + fRec160[0] + fRec162[0] + fRec164[0] + fRec166[0] + fRec168[0] + fRec170[0] + fRec172[0] + fRec174[0] + fRec176[0] + fRec178[0] + fRec180[0] + fRec182[0] + fRec184[0] + fRec186[0] + fRec188[0] + fRec190[0] + fRec192[0] + fRec194[0] + fRec196[0] + fRec198[0] + fRec200[0] + fRec202[0] + fRec204[0] + fRec206[0] + fRec208[0] + fRec210[0] + fRec212[0] + fRec214[0] + fRec216[0] + fRec218[0] + fRec220[0] + fRec222[0] + fRec224[0] + fRec226[0] + fRec228[0] + fRec230[0] + fRec232[0] + fRec234[0] + fRec236[0] + fRec238[0] + fRec240[0] + fRec242[0] + fRec244[0] + fRec246[0] + fRec248[0] + fRec250[0]);
				iVec0[1] = iVec0[0];
				iRec2[1] = iRec2[0];
				iVec1[1] = iVec1[0];
				iVec2[1] = iVec2[0];
				iRec3[1] = iRec3[0];
				iRec4[1] = iRec4[0];
				iVec3[1] = iVec3[0];
				fVec4[2] = fVec4[1];
				fVec4[1] = fVec4[0];
				fRec1[2] = fRec1[1];
				fRec1[1] = fRec1[0];
				fRec0[1] = fRec0[0];
				for (int32 j0 = 10; j0 > 0; j0 = j0 - 1) {
					fVec5.at (j0) = fVec5.at (j0 - 1);
				}
				fRec6[2] = fRec6[1];
				fRec6[1] = fRec6[0];
				fRec5[1] = fRec5[0];
				for (int32 j1 = 4; j1 > 0; j1 = j1 - 1) {
					fVec6.at (j1) = fVec6.at (j1 - 1);
				}
				fRec8[2] = fRec8[1];
				fRec8[1] = fRec8[0];
				fRec7[1] = fRec7[0];
				IOTA0 = IOTA0 + 1;
				fRec10[2] = fRec10[1];
				fRec10[1] = fRec10[0];
				fRec9[1] = fRec9[0];
				iVec8[1] = iVec8[0];
				for (int32 j2 = 3; j2 > 0; j2 = j2 - 1) {
					fVec9.at (j2) = fVec9.at (j2 - 1);
				}
				fRec12[2] = fRec12[1];
				fRec12[1] = fRec12[0];
				fRec11[1] = fRec11[0];
				for (int32 j3 = 14; j3 > 0; j3 = j3 - 1) {
					fVec10.at (j3) = fVec10.at (j3 - 1);
				}
				fRec14[2] = fRec14[1];
				fRec14[1] = fRec14[0];
				fRec13[1] = fRec13[0];
				for (int32 j4 = 5; j4 > 0; j4 = j4 - 1) {
					fVec11.at (j4) = fVec11.at (j4 - 1);
				}
				fRec16[2] = fRec16[1];
				fRec16[1] = fRec16[0];
				fRec15[1] = fRec15[0];
				fRec18[2] = fRec18[1];
				fRec18[1] = fRec18[0];
				fRec17[1] = fRec17[0];
				iVec13[1] = iVec13[0];
				iRec21[1] = iRec21[0];
				iVec14[1] = iVec14[0];
				for (int32 j5 = 4; j5 > 0; j5 = j5 - 1) {
					fVec15.at (j5) = fVec15.at (j5 - 1);
				}
				fRec20[2] = fRec20[1];
				fRec20[1] = fRec20[0];
				fRec19[1] = fRec19[0];
				fRec23[2] = fRec23[1];
				fRec23[1] = fRec23[0];
				fRec22[1] = fRec22[0];
				for (int32 j6 = 7; j6 > 0; j6 = j6 - 1) {
					fVec17.at (j6) = fVec17.at (j6 - 1);
				}
				fRec25[2] = fRec25[1];
				fRec25[1] = fRec25[0];
				fRec24[1] = fRec24[0];
				fRec27[2] = fRec27[1];
				fRec27[1] = fRec27[0];
				fRec26[1] = fRec26[0];
				iVec19[1] = iVec19[0];
				for (int32 j7 = 5; j7 > 0; j7 = j7 - 1) {
					fVec20.at (j7) = fVec20.at (j7 - 1);
				}
				fRec29[2] = fRec29[1];
				fRec29[1] = fRec29[0];
				fRec28[1] = fRec28[0];
				fRec31[2] = fRec31[1];
				fRec31[1] = fRec31[0];
				fRec30[1] = fRec30[0];
				for (int32 j8 = 9; j8 > 0; j8 = j8 - 1) {
					fVec22.at (j8) = fVec22.at (j8 - 1);
				}
				fRec33[2] = fRec33[1];
				fRec33[1] = fRec33[0];
				fRec32[1] = fRec32[0];
				fRec35[2] = fRec35[1];
				fRec35[1] = fRec35[0];
				fRec34[1] = fRec34[0];
				iVec24[1] = iVec24[0];
				for (int32 j9 = 7; j9 > 0; j9 = j9 - 1) {
					fVec25.at (j9) = fVec25.at (j9 - 1);
				}
				fRec37[2] = fRec37[1];
				fRec37[1] = fRec37[0];
				fRec36[1] = fRec36[0];
				fRec39[2] = fRec39[1];
				fRec39[1] = fRec39[0];
				fRec38[1] = fRec38[0];
				for (int32 j10 = 12; j10 > 0; j10 = j10 - 1) {
					fVec27.at (j10) = fVec27.at (j10 - 1);
				}
				fRec41[2] = fRec41[1];
				fRec41[1] = fRec41[0];
				fRec40[1] = fRec40[0];
				fRec43[2] = fRec43[1];
				fRec43[1] = fRec43[0];
				fRec42[1] = fRec42[0];
				iRec46[1] = iRec46[0];
				iVec29[1] = iVec29[0];
				iVec30[1] = iVec30[0];
				iRec47[1] = iRec47[0];
				iRec48[1] = iRec48[0];
				iVec31[1] = iVec31[0];
				for (int32 j11 = 9; j11 > 0; j11 = j11 - 1) {
					fVec32.at (j11) = fVec32.at (j11 - 1);
				}
				fRec45[2] = fRec45[1];
				fRec45[1] = fRec45[0];
				fRec44[1] = fRec44[0];
				fRec50[2] = fRec50[1];
				fRec50[1] = fRec50[0];
				fRec49[1] = fRec49[0];
				fRec52[2] = fRec52[1];
				fRec52[1] = fRec52[0];
				fRec51[1] = fRec51[0];
				fRec54[2] = fRec54[1];
				fRec54[1] = fRec54[0];
				fRec53[1] = fRec53[0];
				iVec36[1] = iVec36[0];
				for (int32 j12 = 12; j12 > 0; j12 = j12 - 1) {
					fVec37.at (j12) = fVec37.at (j12 - 1);
				}
				fRec56[2] = fRec56[1];
				fRec56[1] = fRec56[0];
				fRec55[1] = fRec55[0];
				fRec58[2] = fRec58[1];
				fRec58[1] = fRec58[0];
				fRec57[1] = fRec57[0];
				fRec60[2] = fRec60[1];
				fRec60[1] = fRec60[0];
				fRec59[1] = fRec59[0];
				fRec62[2] = fRec62[1];
				fRec62[1] = fRec62[0];
				fRec61[1] = fRec61[0];
				iVec41[1] = iVec41[0];
				iRec65[1] = iRec65[0];
				iVec42[1] = iVec42[0];
				fRec64[2] = fRec64[1];
				fRec64[1] = fRec64[0];
				fRec63[1] = fRec63[0];
				fRec67[2] = fRec67[1];
				fRec67[1] = fRec67[0];
				fRec66[1] = fRec66[0];
				fRec69[2] = fRec69[1];
				fRec69[1] = fRec69[0];
				fRec68[1] = fRec68[0];
				fRec71[2] = fRec71[1];
				fRec71[1] = fRec71[0];
				fRec70[1] = fRec70[0];
				iVec47[1] = iVec47[0];
				fRec73[2] = fRec73[1];
				fRec73[1] = fRec73[0];
				fRec72[1] = fRec72[0];
				fRec75[2] = fRec75[1];
				fRec75[1] = fRec75[0];
				fRec74[1] = fRec74[0];
				fRec77[2] = fRec77[1];
				fRec77[1] = fRec77[0];
				fRec76[1] = fRec76[0];
				fRec79[2] = fRec79[1];
				fRec79[1] = fRec79[0];
				fRec78[1] = fRec78[0];
				iVec52[1] = iVec52[0];
				fRec81[2] = fRec81[1];
				fRec81[1] = fRec81[0];
				fRec80[1] = fRec80[0];
				fRec83[2] = fRec83[1];
				fRec83[1] = fRec83[0];
				fRec82[1] = fRec82[0];
				fRec85[2] = fRec85[1];
				fRec85[1] = fRec85[0];
				fRec84[1] = fRec84[0];
				fRec87[2] = fRec87[1];
				fRec87[1] = fRec87[0];
				fRec86[1] = fRec86[0];
				iRec90[1] = iRec90[0];
				iVec57[1] = iVec57[0];
				iVec58[1] = iVec58[0];
				iRec91[1] = iRec91[0];
				iRec92[1] = iRec92[0];
				iVec59[1] = iVec59[0];
				fRec89[2] = fRec89[1];
				fRec89[1] = fRec89[0];
				fRec88[1] = fRec88[0];
				fRec94[2] = fRec94[1];
				fRec94[1] = fRec94[0];
				fRec93[1] = fRec93[0];
				fRec96[2] = fRec96[1];
				fRec96[1] = fRec96[0];
				fRec95[1] = fRec95[0];
				fRec98[2] = fRec98[1];
				fRec98[1] = fRec98[0];
				fRec97[1] = fRec97[0];
				iVec64[1] = iVec64[0];
				fRec100[2] = fRec100[1];
				fRec100[1] = fRec100[0];
				fRec99[1] = fRec99[0];
				fRec102[2] = fRec102[1];
				fRec102[1] = fRec102[0];
				fRec101[1] = fRec101[0];
				fRec104[2] = fRec104[1];
				fRec104[1] = fRec104[0];
				fRec103[1] = fRec103[0];
				fRec106[2] = fRec106[1];
				fRec106[1] = fRec106[0];
				fRec105[1] = fRec105[0];
				iVec69[1] = iVec69[0];
				iRec109[1] = iRec109[0];
				iVec70[1] = iVec70[0];
				fRec108[2] = fRec108[1];
				fRec108[1] = fRec108[0];
				fRec107[1] = fRec107[0];
				fRec111[2] = fRec111[1];
				fRec111[1] = fRec111[0];
				fRec110[1] = fRec110[0];
				fRec113[2] = fRec113[1];
				fRec113[1] = fRec113[0];
				fRec112[1] = fRec112[0];
				fRec115[2] = fRec115[1];
				fRec115[1] = fRec115[0];
				fRec114[1] = fRec114[0];
				iVec75[1] = iVec75[0];
				fRec117[2] = fRec117[1];
				fRec117[1] = fRec117[0];
				fRec116[1] = fRec116[0];
				fRec119[2] = fRec119[1];
				fRec119[1] = fRec119[0];
				fRec118[1] = fRec118[0];
				fRec121[2] = fRec121[1];
				fRec121[1] = fRec121[0];
				fRec120[1] = fRec120[0];
				fRec123[2] = fRec123[1];
				fRec123[1] = fRec123[0];
				fRec122[1] = fRec122[0];
				iVec80[1] = iVec80[0];
				fRec125[2] = fRec125[1];
				fRec125[1] = fRec125[0];
				fRec124[1] = fRec124[0];
				fRec127[2] = fRec127[1];
				fRec127[1] = fRec127[0];
				fRec126[1] = fRec126[0];
				fRec129[2] = fRec129[1];
				fRec129[1] = fRec129[0];
				fRec128[1] = fRec128[0];
				fRec131[2] = fRec131[1];
				fRec131[1] = fRec131[0];
				fRec130[1] = fRec130[0];
				iVec85[1] = iVec85[0];
				fVec86[2] = fVec86[1];
				fVec86[1] = fVec86[0];
				fRec133[2] = fRec133[1];
				fRec133[1] = fRec133[0];
				fRec132[1] = fRec132[0];
				for (int32 j13 = 9; j13 > 0; j13 = j13 - 1) {
					fVec87.at (j13) = fVec87.at (j13 - 1);
				}
				fRec135[2] = fRec135[1];
				fRec135[1] = fRec135[0];
				fRec134[1] = fRec134[0];
				for (int32 j14 = 3; j14 > 0; j14 = j14 - 1) {
					fVec88.at (j14) = fVec88.at (j14 - 1);
				}
				fRec137[2] = fRec137[1];
				fRec137[1] = fRec137[0];
				fRec136[1] = fRec136[0];
				fRec139[2] = fRec139[1];
				fRec139[1] = fRec139[0];
				fRec138[1] = fRec138[0];
				iVec90[1] = iVec90[0];
				fVec91[2] = fVec91[1];
				fVec91[1] = fVec91[0];
				fRec141[2] = fRec141[1];
				fRec141[1] = fRec141[0];
				fRec140[1] = fRec140[0];
				for (int32 j15 = 12; j15 > 0; j15 = j15 - 1) {
					fVec92.at (j15) = fVec92.at (j15 - 1);
				}
				fRec143[2] = fRec143[1];
				fRec143[1] = fRec143[0];
				fRec142[1] = fRec142[0];
				for (int32 j16 = 4; j16 > 0; j16 = j16 - 1) {
					fVec93.at (j16) = fVec93.at (j16 - 1);
				}
				fRec145[2] = fRec145[1];
				fRec145[1] = fRec145[0];
				fRec144[1] = fRec144[0];
				fRec147[2] = fRec147[1];
				fRec147[1] = fRec147[0];
				fRec146[1] = fRec146[0];
				iVec95[1] = iVec95[0];
				for (int32 j17 = 3; j17 > 0; j17 = j17 - 1) {
					fVec96.at (j17) = fVec96.at (j17 - 1);
				}
				fRec149[2] = fRec149[1];
				fRec149[1] = fRec149[0];
				fRec148[1] = fRec148[0];
				fRec151[2] = fRec151[1];
				fRec151[1] = fRec151[0];
				fRec150[1] = fRec150[0];
				for (int32 j18 = 6; j18 > 0; j18 = j18 - 1) {
					fVec98.at (j18) = fVec98.at (j18 - 1);
				}
				fRec153[2] = fRec153[1];
				fRec153[1] = fRec153[0];
				fRec152[1] = fRec152[0];
				fRec155[2] = fRec155[1];
				fRec155[1] = fRec155[0];
				fRec154[1] = fRec154[0];
				iVec100[1] = iVec100[0];
				for (int32 j19 = 4; j19 > 0; j19 = j19 - 1) {
					fVec101.at (j19) = fVec101.at (j19 - 1);
				}
				fRec157[2] = fRec157[1];
				fRec157[1] = fRec157[0];
				fRec156[1] = fRec156[0];
				fRec159[2] = fRec159[1];
				fRec159[1] = fRec159[0];
				fRec158[1] = fRec158[0];
				for (int32 j20 = 8; j20 > 0; j20 = j20 - 1) {
					fVec103.at (j20) = fVec103.at (j20 - 1);
				}
				fRec161[2] = fRec161[1];
				fRec161[1] = fRec161[0];
				fRec160[1] = fRec160[0];
				fRec163[2] = fRec163[1];
				fRec163[1] = fRec163[0];
				fRec162[1] = fRec162[0];
				iVec105[1] = iVec105[0];
				for (int32 j21 = 6; j21 > 0; j21 = j21 - 1) {
					fVec106.at (j21) = fVec106.at (j21 - 1);
				}
				fRec165[2] = fRec165[1];
				fRec165[1] = fRec165[0];
				fRec164[1] = fRec164[0];
				fRec167[2] = fRec167[1];
				fRec167[1] = fRec167[0];
				fRec166[1] = fRec166[0];
				for (int32 j22 = 10; j22 > 0; j22 = j22 - 1) {
					fVec108.at (j22) = fVec108.at (j22 - 1);
				}
				fRec169[2] = fRec169[1];
				fRec169[1] = fRec169[0];
				fRec168[1] = fRec168[0];
				fRec171[2] = fRec171[1];
				fRec171[1] = fRec171[0];
				fRec170[1] = fRec170[0];
				iVec110[1] = iVec110[0];
				for (int32 j23 = 8; j23 > 0; j23 = j23 - 1) {
					fVec111.at (j23) = fVec111.at (j23 - 1);
				}
				fRec173[2] = fRec173[1];
				fRec173[1] = fRec173[0];
				fRec172[1] = fRec172[0];
				fRec175[2] = fRec175[1];
				fRec175[1] = fRec175[0];
				fRec174[1] = fRec174[0];
				for (int32 j24 = 14; j24 > 0; j24 = j24 - 1) {
					fVec113.at (j24) = fVec113.at (j24 - 1);
				}
				fRec177[2] = fRec177[1];
				fRec177[1] = fRec177[0];
				fRec176[1] = fRec176[0];
				fRec179[2] = fRec179[1];
				fRec179[1] = fRec179[0];
				fRec178[1] = fRec178[0];
				iVec115[1] = iVec115[0];
				for (int32 j25 = 11; j25 > 0; j25 = j25 - 1) {
					fVec116.at (j25) = fVec116.at (j25 - 1);
				}
				fRec181[2] = fRec181[1];
				fRec181[1] = fRec181[0];
				fRec180[1] = fRec180[0];
				fRec183[2] = fRec183[1];
				fRec183[1] = fRec183[0];
				fRec182[1] = fRec182[0];
				fRec185[2] = fRec185[1];
				fRec185[1] = fRec185[0];
				fRec184[1] = fRec184[0];
				fRec187[2] = fRec187[1];
				fRec187[1] = fRec187[0];
				fRec186[1] = fRec186[0];
				iVec120[1] = iVec120[0];
				for (int32 j26 = 14; j26 > 0; j26 = j26 - 1) {
					fVec121.at (j26) = fVec121.at (j26 - 1);
				}
				fRec189[2] = fRec189[1];
				fRec189[1] = fRec189[0];
				fRec188[1] = fRec188[0];
				fRec191[2] = fRec191[1];
				fRec191[1] = fRec191[0];
				fRec190[1] = fRec190[0];
				fRec193[2] = fRec193[1];
				fRec193[1] = fRec193[0];
				fRec192[1] = fRec192[0];
				fRec195[2] = fRec195[1];
				fRec195[1] = fRec195[0];
				fRec194[1] = fRec194[0];
				iVec125[1] = iVec125[0];
				fRec197[2] = fRec197[1];
				fRec197[1] = fRec197[0];
				fRec196[1] = fRec196[0];
				fRec199[2] = fRec199[1];
				fRec199[1] = fRec199[0];
				fRec198[1] = fRec198[0];
				fRec201[2] = fRec201[1];
				fRec201[1] = fRec201[0];
				fRec200[1] = fRec200[0];
				fRec203[2] = fRec203[1];
				fRec203[1] = fRec203[0];
				fRec202[1] = fRec202[0];
				iVec130[1] = iVec130[0];
				fRec205[2] = fRec205[1];
				fRec205[1] = fRec205[0];
				fRec204[1] = fRec204[0];
				fRec207[2] = fRec207[1];
				fRec207[1] = fRec207[0];
				fRec206[1] = fRec206[0];
				fRec209[2] = fRec209[1];
				fRec209[1] = fRec209[0];
				fRec208[1] = fRec208[0];
				fRec211[2] = fRec211[1];
				fRec211[1] = fRec211[0];
				fRec210[1] = fRec210[0];
				iVec135[1] = iVec135[0];
				fRec213[2] = fRec213[1];
				fRec213[1] = fRec213[0];
				fRec212[1] = fRec212[0];
				fRec215[2] = fRec215[1];
				fRec215[1] = fRec215[0];
				fRec214[1] = fRec214[0];
				fRec217[2] = fRec217[1];
				fRec217[1] = fRec217[0];
				fRec216[1] = fRec216[0];
				fRec219[2] = fRec219[1];
				fRec219[1] = fRec219[0];
				fRec218[1] = fRec218[0];
				iVec140[1] = iVec140[0];
				fRec221[2] = fRec221[1];
				fRec221[1] = fRec221[0];
				fRec220[1] = fRec220[0];
				fRec223[2] = fRec223[1];
				fRec223[1] = fRec223[0];
				fRec222[1] = fRec222[0];
				fRec225[2] = fRec225[1];
				fRec225[1] = fRec225[0];
				fRec224[1] = fRec224[0];
				fRec227[2] = fRec227[1];
				fRec227[1] = fRec227[0];
				fRec226[1] = fRec226[0];
				iVec145[1] = iVec145[0];
				fRec229[2] = fRec229[1];
				fRec229[1] = fRec229[0];
				fRec228[1] = fRec228[0];
				fRec231[2] = fRec231[1];
				fRec231[1] = fRec231[0];
				fRec230[1] = fRec230[0];
				fRec233[2] = fRec233[1];
				fRec233[1] = fRec233[0];
				fRec232[1] = fRec232[0];
				fRec235[2] = fRec235[1];
				fRec235[1] = fRec235[0];
				fRec234[1] = fRec234[0];
				iVec150[1] = iVec150[0];
				fRec237[2] = fRec237[1];
				fRec237[1] = fRec237[0];
				fRec236[1] = fRec236[0];
				fRec239[2] = fRec239[1];
				fRec239[1] = fRec239[0];
				fRec238[1] = fRec238[0];
				fRec241[2] = fRec241[1];
				fRec241[1] = fRec241[0];
				fRec240[1] = fRec240[0];
				fRec243[2] = fRec243[1];
				fRec243[1] = fRec243[0];
				fRec242[1] = fRec242[0];
				iVec155[1] = iVec155[0];
				fRec245[2] = fRec245[1];
				fRec245[1] = fRec245[0];
				fRec244[1] = fRec244[0];
				fRec247[2] = fRec247[1];
				fRec247[1] = fRec247[0];
				fRec246[1] = fRec246[0];
				fRec249[2] = fRec249[1];
				fRec249[1] = fRec249[0];
				fRec248[1] = fRec248[0];
				fRec251[2] = fRec251[1];
				fRec251[1] = fRec251[0];
				fRec250[1] = fRec250[0];
				
				// Moves all streams forward by one 'tick'
				advance();
			}
		}
	}
}

// Nothing more for now

/******************** END minimal.cmajor ****************/
